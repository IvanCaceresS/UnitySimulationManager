{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre EColi, SCerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (EColi y SCerevisiae): 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.SCerevisiaeComponent.cs, 5.EColiSystem.cs, 6.SCerevisiaeSystem.cs. - Si se pide solo EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.EColiSystem.cs. - Si se pide solo SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiaeComponent.cs, 4.SCerevisiaeSystem.cs - Si se pide 2 EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColi_1Component.cs, 4.EColi_2Component.cs, 5.EColi_1System.cs, 6.EColi_2System.cs. - Si se pide 2 SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiae_1Component.cs, 4.SCerevisiae_2Component.cs, 5.SCerevisiae_1System.cs, 6.SCerevisiae_2System.cs. El formato de cada script debe ser \"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\"."},{"role": "user","content": "Una EColi y una SCerevisiae. La EColi debe ser de color verde, duplicarse cada 20 minutos y el hijo se separa del padre cuando alcanza el 70% del crecimiento. La scerevisiae debe ser de color azul, duplicarse cada 90 minutos y el hijo se separa del padre cuando alcanza el 70% del crecimiento."},{"role": "assistant","content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{const string pF=\"Assets/Resources/Prefabs\",mF=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(pF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+pF);}if(!AssetDatabase.IsValidFolder(mF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+mF);}CPAM(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5,5,5),new Vector3(90,0,0),0);CPAM(\"EColi\",PrimitiveType.Capsule,new Vector3(.5f,1,.5f),new Vector3(90,0,0),1);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados.\");}static void CPAM(string n,PrimitiveType t,Vector3 s,Vector3 r,int c){var o=GameObject.CreatePrimitive(t);o.name=n;o.transform.rotation=Quaternion.Euler(r);o.transform.localScale=s;var col=o.GetComponent<Collider>();if(col!=null)Object.DestroyImmediate(col);if(c==0)o.AddComponent<SphereCollider>();else o.AddComponent<CapsuleCollider>();var sh=Shader.Find(\"Universal Render Pipeline/Lit\");if(sh==null){Debug.LogError(\"Shader URP/Lit no encontrado.\");return;}var m=new Material(sh);m.color=n==\"SCerevisiae\"?new Color(0,0,1,1):n==\"EColi\"?new Color(0,1,0,1):Color.white;AssetDatabase.CreateAsset(m,Path.Combine(mF,n+\".mat\"));AssetDatabase.SaveAssets();AssetDatabase.Refresh();o.GetComponent<Renderer>().sharedMaterial=m;PrefabUtility.SaveAsPrefabAsset(o,Path.Combine(pF,n+\".prefab\"));Object.DestroyImmediate(o);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 p){if(currentPrefabIndex>=prefabs.Count)return;var sQ=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=sQ.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");sQ.Dispose();return;}Entity s=sQ[currentPrefabIndex];sQ.Dispose();Entity pe=entityManager.GetComponentData<PrefabEntityComponent>(s).prefab;Entity e=entityManager.Instantiate(pe);float os=entityManager.GetComponentData<LocalTransform>(pe).Scale;quaternion or=entityManager.GetComponentData<LocalTransform>(pe).Rotation;float ry=UnityEngine.Random.Range(0f,360f);quaternion nr=math.mul(or,quaternion.RotateY(math.radians(ry)));float h=os*.5f;float3 ap=new float3(p.x,math.max(p.y+h,h),p.z);entityManager.SetComponentData(e,new LocalTransform{Position=ap,Rotation=nr,Scale=os});string n=prefabs[currentPrefabIndex].name;switch(n){case\"EColi\":entityManager.AddComponentData(e,new EColiComponent{TimeReference=1200f,SeparationThreshold=0.7f,MaxScale=1f,GrowthTime=0f,GrowthDuration=1200f*0.7f,TimeSinceLastDivision=0f,DivisionInterval=1200f*0.7f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});entityManager.AddComponent(e,typeof(NonUniformScale));entityManager.SetComponentData(e,new NonUniformScale{Value=new float3(.5f,1f,.5f)});break;case\"SCerevisiae\":entityManager.AddComponentData(e,new SCerevisiaeComponent{TimeReference=5400f,SeparationThreshold=0.7f,MaxScale=5f,GrowthTime=0f,GrowthDuration=5400f*0.7f,TimeSinceLastDivision=0f,DivisionInterval=5400f*0.7f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{n}'\");break;}AddPhysicsComponents(e,n,os);Debug.Log($\"Entidad '{n}' creada en {ap}\");}private void AddPhysicsComponents(Entity e,string n,float s){BlobAssetReference<Unity.Physics.Collider>c=default;Material m=new Material{Restitution=0f};switch(n){case\"EColi\":c=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-.5f,0),Vertex1=new float3(0,.5f,0),Radius=.25f},CollisionFilter.Default,m);break;case\"SCerevisiae\":c=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=s*0.1f},CollisionFilter.Default,m);break;default:Debug.LogWarning($\"No collider para '{n}'\");return;}entityManager.AddComponentData(e,new PhysicsCollider{Value=c});if(c.IsCreated){var mp=c.Value.MassProperties;entityManager.AddComponentData(e,PhysicsMass.CreateDynamic(mp,1f));}entityManager.AddComponentData(e,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(e,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(e,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{n}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int s=rng.NextFloat()<0.5f?1:-1;Entity c=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;EColiComponent cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.HasGeneratedChild=false;cd.Parent=entity;cd.IsInitialCell=false;cd.SeparationSign=s;float3 u=math.mul(transform.Rotation,new float3(0,s,0));ct.Position=transform.Position+u*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,c,ct);ecb.SetComponent(entityInQueryIndex,c,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;ecb.SetComponent(entityInQueryIndex,entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 rnd=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;SCerevisiaeComponent cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.IsInitialCell=false;cd.Parent=entity;cd.GrowthDirection=rnd;ct.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,ct);ecb.SetComponent(entityInQueryIndex,child,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,organism.GrowthDirection);transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre EColi, SCerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (EColi y SCerevisiae): 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.SCerevisiaeComponent.cs, 5.EColiSystem.cs, 6.SCerevisiaeSystem.cs. - Si se pide solo EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.EColiSystem.cs. - Si se pide solo SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiaeComponent.cs, 4.SCerevisiaeSystem.cs - Si se pide 2 EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColi_1Component.cs, 4.EColi_2Component.cs, 5.EColi_1System.cs, 6.EColi_2System.cs. - Si se pide 2 SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiae_1Component.cs, 4.SCerevisiae_2Component.cs, 5.SCerevisiae_1System.cs, 6.SCerevisiae_2System.cs. El formato de cada script debe ser \"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\"."},{"role": "user","content": "Una EColi y una SCerevisiae. La EColi debe ser de color rojo, duplicarse cada 15 minutos y el hijo se separa del padre cuando alcanza el 60% del crecimiento. La scerevisiae debe ser de color magenta, duplicarse cada 30 minutos y el hijo se separa del padre cuando alcanza el 80% del crecimiento."},{"role": "assistant","content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{const string pF=\"Assets/Resources/Prefabs\",mF=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(pF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+pF);}if(!AssetDatabase.IsValidFolder(mF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+mF);}CPAM(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5,5,5),new Vector3(90,0,0),0);CPAM(\"EColi\",PrimitiveType.Capsule,new Vector3(.5f,1,.5f),new Vector3(90,0,0),1);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados.\");}static void CPAM(string n,PrimitiveType t,Vector3 s,Vector3 r,int c){var o=GameObject.CreatePrimitive(t);o.name=n;o.transform.rotation=Quaternion.Euler(r);o.transform.localScale=s;var col=o.GetComponent<Collider>();if(col!=null)Object.DestroyImmediate(col);if(c==0)o.AddComponent<SphereCollider>();else o.AddComponent<CapsuleCollider>();var sh=Shader.Find(\"Universal Render Pipeline/Lit\");if(sh==null){Debug.LogError(\"Shader URP/Lit no encontrado.\");return;}var m=new Material(sh);m.color=n==\"SCerevisiae\"?new Color(1,0,1,1):n==\"EColi\"?new Color(1,0,0,1):Color.white;AssetDatabase.CreateAsset(m,Path.Combine(mF,n+\".mat\"));AssetDatabase.SaveAssets();AssetDatabase.Refresh();o.GetComponent<Renderer>().sharedMaterial=m;PrefabUtility.SaveAsPrefabAsset(o,Path.Combine(pF,n+\".prefab\"));Object.DestroyImmediate(o);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 p){if(currentPrefabIndex>=prefabs.Count)return;var sQ=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=sQ.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");sQ.Dispose();return;}Entity s=sQ[currentPrefabIndex];sQ.Dispose();Entity pe=entityManager.GetComponentData<PrefabEntityComponent>(s).prefab;Entity e=entityManager.Instantiate(pe);float os=entityManager.GetComponentData<LocalTransform>(pe).Scale;quaternion or=entityManager.GetComponentData<LocalTransform>(pe).Rotation;float ry=UnityEngine.Random.Range(0f,360f);quaternion nr=math.mul(or,quaternion.RotateY(math.radians(ry)));float h=os*.5f;float3 ap=new float3(p.x,math.max(p.y+h,h),p.z);entityManager.SetComponentData(e,new LocalTransform{Position=ap,Rotation=nr,Scale=os});string n=prefabs[currentPrefabIndex].name;switch(n){case \"EColi\":entityManager.AddComponentData(e,new EColiComponent{TimeReference=900f,SeparationThreshold=0.6f,MaxScale=1f,GrowthTime=0f,GrowthDuration=900f*0.6f,TimeSinceLastDivision=0f,DivisionInterval=900f*0.6f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});entityManager.AddComponent(e,typeof(NonUniformScale));entityManager.SetComponentData(e,new NonUniformScale{Value=new float3(.5f,1f,.5f)});break;case \"SCerevisiae\":entityManager.AddComponentData(e,new SCerevisiaeComponent{TimeReference=1800f,SeparationThreshold=0.8f,MaxScale=5f,GrowthTime=0f,GrowthDuration=1800f*0.8f,TimeSinceLastDivision=0f,DivisionInterval=1800f*0.8f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{n}'\");break;}AddPhysicsComponents(e,n,os);Debug.Log($\"Entidad '{n}' creada en {ap}\");}private void AddPhysicsComponents(Entity e,string n,float s){BlobAssetReference<Unity.Physics.Collider> c=default;Material m=new Material{Restitution=0f};switch(n){case \"EColi\":c=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-.5f,0),Vertex1=new float3(0,.5f,0),Radius=.25f},CollisionFilter.Default,m);break;case \"SCerevisiae\":c=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=s*0.1f},CollisionFilter.Default,m);break;default:Debug.LogWarning($\"No collider para '{n}'\");return;}entityManager.AddComponentData(e,new PhysicsCollider{Value=c});if(c.IsCreated){var mp=c.Value.MassProperties;entityManager.AddComponentData(e,PhysicsMass.CreateDynamic(mp,1f));}entityManager.AddComponentData(e,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(e,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(e,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{n}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int s=rng.NextFloat()<0.5f?1:-1;Entity c=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;EColiComponent cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.HasGeneratedChild=false;cd.Parent=entity;cd.IsInitialCell=false;cd.SeparationSign=s;float3 u=math.mul(transform.Rotation,new float3(0,s,0));ct.Position=transform.Position+u*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,c,ct);ecb.SetComponent(entityInQueryIndex,c,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;ecb.SetComponent(entityInQueryIndex,entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 rnd=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;SCerevisiaeComponent cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.IsInitialCell=false;cd.Parent=entity;cd.GrowthDirection=rnd;ct.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,ct);ecb.SetComponent(entityInQueryIndex,child,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,organism.GrowthDirection);transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre EColi, SCerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (EColi y SCerevisiae): 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.SCerevisiaeComponent.cs, 5.EColiSystem.cs, 6.SCerevisiaeSystem.cs. - Si se pide solo EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.EColiSystem.cs. - Si se pide solo SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiaeComponent.cs, 4.SCerevisiaeSystem.cs - Si se pide 2 EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColi_1Component.cs, 4.EColi_2Component.cs, 5.EColi_1System.cs, 6.EColi_2System.cs. - Si se pide 2 SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiae_1Component.cs, 4.SCerevisiae_2Component.cs, 5.SCerevisiae_1System.cs, 6.SCerevisiae_2System.cs. El formato de cada script debe ser \"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\"."},{"role": "user","content": "Una SCerevisiae y una EColi. La SCerevisiae debe ser de color magenta, duplicarse cada 35 minutos y el hijo se separa del padre cuando alcanza el 60% del crecimiento. La EColi debe ser de color gris oscuro, duplicarse cada 18 minutos y el hijo se separa del padre cuando alcanza el 55% del crecimiento."},{"role": "assistant","content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{const string pF=\"Assets/Resources/Prefabs\",mF=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(pF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+pF);}if(!AssetDatabase.IsValidFolder(mF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+mF);}CPAM(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5,5,5),new Vector3(90,0,0),0);CPAM(\"EColi\",PrimitiveType.Capsule,new Vector3(.5f,1,.5f),new Vector3(90,0,0),1);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados.\");}static void CPAM(string n,PrimitiveType t,Vector3 s,Vector3 r,int c){var o=GameObject.CreatePrimitive(t);o.name=n;o.transform.rotation=Quaternion.Euler(r);o.transform.localScale=s;var col=o.GetComponent<Collider>();if(col!=null)Object.DestroyImmediate(col);if(c==0)o.AddComponent<SphereCollider>();else o.AddComponent<CapsuleCollider>();var sh=Shader.Find(\"Universal Render Pipeline/Lit\");if(sh==null){Debug.LogError(\"Shader URP/Lit no encontrado.\");return;}var m=new Material(sh);m.color=n==\"SCerevisiae\"?new Color(1,0,1,1):new Color(0.25f,0.25f,0.25f,1);AssetDatabase.CreateAsset(m,Path.Combine(mF,n+\".mat\"));AssetDatabase.SaveAssets();AssetDatabase.Refresh();o.GetComponent<Renderer>().sharedMaterial=m;PrefabUtility.SaveAsPrefabAsset(o,Path.Combine(pF,n+\".prefab\"));Object.DestroyImmediate(o);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 p){if(currentPrefabIndex>=prefabs.Count)return;var sQ=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=sQ.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");sQ.Dispose();return;}Entity s=sQ[currentPrefabIndex];sQ.Dispose();Entity pe=entityManager.GetComponentData<PrefabEntityComponent>(s).prefab;Entity e=entityManager.Instantiate(pe);float os=entityManager.GetComponentData<LocalTransform>(pe).Scale;quaternion or=entityManager.GetComponentData<LocalTransform>(pe).Rotation;float ry=UnityEngine.Random.Range(0f,360f);quaternion nr=math.mul(or,quaternion.RotateY(math.radians(ry)));float h=os*.5f;float3 ap=new float3(p.x,math.max(p.y+h,h),p.z);entityManager.SetComponentData(e,new LocalTransform{Position=ap,Rotation=nr,Scale=os});string n=prefabs[currentPrefabIndex].name;switch(n){case \"EColi\":entityManager.AddComponentData(e,new EColiComponent{TimeReference=1080f,SeparationThreshold=0.55f,MaxScale=1f,GrowthTime=0f,GrowthDuration=1080f*0.55f,TimeSinceLastDivision=0f,DivisionInterval=1080f*0.55f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});entityManager.AddComponent(e,typeof(NonUniformScale));entityManager.SetComponentData(e,new NonUniformScale{Value=new float3(.5f,1f,.5f)});break;case \"SCerevisiae\":entityManager.AddComponentData(e,new SCerevisiaeComponent{TimeReference=2100f,SeparationThreshold=0.6f,MaxScale=5f,GrowthTime=0f,GrowthDuration=2100f*0.6f,TimeSinceLastDivision=0f,DivisionInterval=2100f*0.6f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{n}'\");break;}AddPhysicsComponents(e,n,os);Debug.Log($\"Entidad '{n}' creada en {ap}\");}private void AddPhysicsComponents(Entity e,string n,float s){BlobAssetReference<Unity.Physics.Collider>c=default;Material m=new Material{Restitution=0f};switch(n){case \"EColi\":c=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-.5f,0),Vertex1=new float3(0,.5f,0),Radius=.25f},CollisionFilter.Default,m);break;case \"SCerevisiae\":c=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=s*0.1f},CollisionFilter.Default,m);break;default:Debug.LogWarning($\"No collider para '{n}'\");return;}entityManager.AddComponentData(e,new PhysicsCollider{Value=c});if(c.IsCreated){var mp=c.Value.MassProperties;entityManager.AddComponentData(e,PhysicsMass.CreateDynamic(mp,1f));}entityManager.AddComponentData(e,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(e,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(e,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{n}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int s=rng.NextFloat()<0.5f?1:-1;Entity c=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;EColiComponent cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.HasGeneratedChild=false;cd.Parent=entity;cd.IsInitialCell=false;cd.SeparationSign=s;float3 u=math.mul(transform.Rotation,new float3(0,s,0));ct.Position=transform.Position+u*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,c,ct);ecb.SetComponent(entityInQueryIndex,c,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;ecb.SetComponent(entityInQueryIndex,entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 rnd=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;SCerevisiaeComponent cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.IsInitialCell=false;cd.Parent=entity;cd.GrowthDirection=rnd;ct.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,ct);ecb.SetComponent(entityInQueryIndex,child,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,organism.GrowthDirection);transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre EColi, SCerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (EColi y SCerevisiae): 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.SCerevisiaeComponent.cs, 5.EColiSystem.cs, 6.SCerevisiaeSystem.cs. - Si se pide solo EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.EColiSystem.cs. - Si se pide solo SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiaeComponent.cs, 4.SCerevisiaeSystem.cs - Si se pide 2 EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColi_1Component.cs, 4.EColi_2Component.cs, 5.EColi_1System.cs, 6.EColi_2System.cs. - Si se pide 2 SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiae_1Component.cs, 4.SCerevisiae_2Component.cs, 5.SCerevisiae_1System.cs, 6.SCerevisiae_2System.cs. El formato de cada script debe ser \"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\"."},{"role": "user","content": "Una SCerevisiae y una EColi. La scerevisiae debe ser de color rosa oscuro, duplicarse cada 65 minutos y el hijo se separa del padre cuando alcanza el 95% del crecimiento. La EColi debe ser de color gris, duplicarse cada 14 minutos y el hijo se separa del padre cuando alcanza el 50% del crecimiento."},{"role": "assistant","content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{const string pF=\"Assets/Resources/Prefabs\",mF=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(pF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+pF);}if(!AssetDatabase.IsValidFolder(mF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+mF);}CPAM(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5,5,5),new Vector3(90,0,0),0);CPAM(\"EColi\",PrimitiveType.Capsule,new Vector3(.5f,1,.5f),new Vector3(90,0,0),1);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados.\");}static void CPAM(string n,PrimitiveType t,Vector3 s,Vector3 r,int c){var o=GameObject.CreatePrimitive(t);o.name=n;o.transform.rotation=Quaternion.Euler(r);o.transform.localScale=s;var col=o.GetComponent<Collider>();if(col!=null)Object.DestroyImmediate(col);if(c==0)o.AddComponent<SphereCollider>();else o.AddComponent<CapsuleCollider>();var sh=Shader.Find(\"Universal Render Pipeline/Lit\");if(sh==null){Debug.LogError(\"Shader URP/Lit no encontrado.\");return;}var m=new Material(sh);m.color=n==\"SCerevisiae\"?new Color(0.9f,0.1f,0.5f,1):n==\"EColi\"?new Color(0.5f,0.5f,0.5f,1):Color.white;AssetDatabase.CreateAsset(m,Path.Combine(mF,n+\".mat\"));AssetDatabase.SaveAssets();AssetDatabase.Refresh();o.GetComponent<Renderer>().sharedMaterial=m;PrefabUtility.SaveAsPrefabAsset(o,Path.Combine(pF,n+\".prefab\"));Object.DestroyImmediate(o);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 p){if(currentPrefabIndex>=prefabs.Count)return;var sQ=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=sQ.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");sQ.Dispose();return;}Entity s=sQ[currentPrefabIndex];sQ.Dispose();Entity pe=entityManager.GetComponentData<PrefabEntityComponent>(s).prefab;Entity e=entityManager.Instantiate(pe);float os=entityManager.GetComponentData<LocalTransform>(pe).Scale;quaternion or=entityManager.GetComponentData<LocalTransform>(pe).Rotation;float ry=UnityEngine.Random.Range(0f,360f);quaternion nr=math.mul(or,quaternion.RotateY(math.radians(ry)));float h=os*.5f;float3 ap=new float3(p.x,math.max(p.y+h,h),p.z);entityManager.SetComponentData(e,new LocalTransform{Position=ap,Rotation=nr,Scale=os});string n=prefabs[currentPrefabIndex].name;switch(n){case \"EColi\":entityManager.AddComponentData(e,new EColiComponent{TimeReference=840f,SeparationThreshold=0.5f,MaxScale=1f,GrowthTime=0f,GrowthDuration=840f*0.5f,TimeSinceLastDivision=0f,DivisionInterval=840f*0.5f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});entityManager.AddComponent(e,typeof(NonUniformScale));entityManager.SetComponentData(e,new NonUniformScale{Value=new float3(.5f,1f,.5f)});break;case \"SCerevisiae\":entityManager.AddComponentData(e,new SCerevisiaeComponent{TimeReference=3900f,SeparationThreshold=0.95f,MaxScale=5f,GrowthTime=0f,GrowthDuration=3900f*0.95f,TimeSinceLastDivision=0f,DivisionInterval=3900f*0.95f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{n}'\");break;}AddPhysicsComponents(e,n,os);Debug.Log($\"Entidad '{n}' creada en {ap}\");}private void AddPhysicsComponents(Entity e,string n,float s){BlobAssetReference<Unity.Physics.Collider> c=default;Material m=new Material{Restitution=0f};switch(n){case \"EColi\":c=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-.5f,0),Vertex1=new float3(0,.5f,0),Radius=.25f},CollisionFilter.Default,m);break;case \"SCerevisiae\":c=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=s*0.1f},CollisionFilter.Default,m);break;default:Debug.LogWarning($\"No collider para '{n}'\");return;}entityManager.AddComponentData(e,new PhysicsCollider{Value=c});if(c.IsCreated){var mp=c.Value.MassProperties;entityManager.AddComponentData(e,PhysicsMass.CreateDynamic(mp,1f));}entityManager.AddComponentData(e,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(e,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(e,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{n}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int s=rng.NextFloat()<0.5f?1:-1;Entity c=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;EColiComponent cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.HasGeneratedChild=false;cd.Parent=entity;cd.IsInitialCell=false;cd.SeparationSign=s;float3 u=math.mul(transform.Rotation,new float3(0,s,0));ct.Position=transform.Position+u*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,c,ct);ecb.SetComponent(entityInQueryIndex,c,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;ecb.SetComponent(entityInQueryIndex,entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 rnd=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;SCerevisiaeComponent cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.IsInitialCell=false;cd.Parent=entity;cd.GrowthDirection=rnd;ct.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,ct);ecb.SetComponent(entityInQueryIndex,child,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,organism.GrowthDirection);transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre EColi, SCerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (EColi y SCerevisiae): 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.SCerevisiaeComponent.cs, 5.EColiSystem.cs, 6.SCerevisiaeSystem.cs. - Si se pide solo EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.EColiSystem.cs. - Si se pide solo SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiaeComponent.cs, 4.SCerevisiaeSystem.cs - Si se pide 2 EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColi_1Component.cs, 4.EColi_2Component.cs, 5.EColi_1System.cs, 6.EColi_2System.cs. - Si se pide 2 SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiae_1Component.cs, 4.SCerevisiae_2Component.cs, 5.SCerevisiae_1System.cs, 6.SCerevisiae_2System.cs. El formato de cada script debe ser \"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\"."},{"role": "user","content": "Una EColi. La EColi debe ser de color verde, duplicarse cada 12 minutos y el hijo se separa del padre cuando alcanza el 65% del crecimiento."},{"role": "assistant","content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{const string pF=\"Assets/Resources/Prefabs\",mF=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(pF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+pF);}if(!AssetDatabase.IsValidFolder(mF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+mF);}CPAM(\"EColi\",PrimitiveType.Capsule,new Vector3(.5f,1,.5f),new Vector3(90,0,0),1);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados.\");}static void CPAM(string n,PrimitiveType t,Vector3 s,Vector3 r,int c){var o=GameObject.CreatePrimitive(t);o.name=n;o.transform.rotation=Quaternion.Euler(r);o.transform.localScale=s;var col=o.GetComponent<Collider>();if(col!=null)Object.DestroyImmediate(col);if(c==1)o.AddComponent<CapsuleCollider>();var sh=Shader.Find(\"Universal Render Pipeline/Lit\");if(sh==null){Debug.LogError(\"Shader URP/Lit no encontrado.\");return;}var m=new Material(sh);m.color=new Color(0,1,0,1);AssetDatabase.CreateAsset(m,Path.Combine(mF,n+\".mat\"));AssetDatabase.SaveAssets();AssetDatabase.Refresh();o.GetComponent<Renderer>().sharedMaterial=m;PrefabUtility.SaveAsPrefabAsset(o,Path.Combine(pF,n+\".prefab\"));Object.DestroyImmediate(o);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 p){if(currentPrefabIndex>=prefabs.Count)return;var sQ=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=sQ.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");sQ.Dispose();return;}Entity s=sQ[currentPrefabIndex];sQ.Dispose();Entity pe=entityManager.GetComponentData<PrefabEntityComponent>(s).prefab;Entity e=entityManager.Instantiate(pe);float os=entityManager.GetComponentData<LocalTransform>(pe).Scale;quaternion or=entityManager.GetComponentData<LocalTransform>(pe).Rotation;float ry=UnityEngine.Random.Range(0f,360f);quaternion nr=math.mul(or,quaternion.RotateY(math.radians(ry)));float h=os*.5f;float3 ap=new float3(p.x,math.max(p.y+h,h),p.z);entityManager.SetComponentData(e,new LocalTransform{Position=ap,Rotation=nr,Scale=os});string n=prefabs[currentPrefabIndex].name;if(n==\"EColi\"){entityManager.AddComponentData(e,new EColiComponent{TimeReference=720f,SeparationThreshold=0.65f,MaxScale=1f,GrowthTime=0f,GrowthDuration=720f*0.65f,TimeSinceLastDivision=0f,DivisionInterval=720f*0.65f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});entityManager.AddComponent(e,typeof(NonUniformScale));entityManager.SetComponentData(e,new NonUniformScale{Value=new float3(.5f,1f,.5f)});}else{Debug.LogWarning($\"No hay componente ECS para '{n}'\");}AddPhysicsComponents(e,n,os);Debug.Log($\"Entidad '{n}' creada en {ap}\");}private void AddPhysicsComponents(Entity e,string n,float s){BlobAssetReference<Unity.Physics.Collider> c=default;Material m=new Material{Restitution=0f};if(n==\"EColi\"){c=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-.5f,0),Vertex1=new float3(0,.5f,0),Radius=.25f},CollisionFilter.Default,m);}else{Debug.LogWarning($\"No collider para '{n}'\");return;}entityManager.AddComponentData(e,new PhysicsCollider{Value=c});if(c.IsCreated){var mp=c.Value.MassProperties;entityManager.AddComponentData(e,PhysicsMass.CreateDynamic(mp,1f));}entityManager.AddComponentData(e,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(e,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(e,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{n}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;}}4.EColiSystem.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int s=rng.NextFloat()<0.5f?1:-1;Entity c=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;EColiComponent cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.HasGeneratedChild=false;cd.Parent=entity;cd.IsInitialCell=false;cd.SeparationSign=s;float3 u=math.mul(transform.Rotation,new float3(0,s,0));ct.Position=transform.Position+u*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,c,ct);ecb.SetComponent(entityInQueryIndex,c,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell && organism.Parent!=Entity.Null && parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;ecb.SetComponent(entityInQueryIndex,entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre EColi, SCerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (EColi y SCerevisiae): 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.SCerevisiaeComponent.cs, 5.EColiSystem.cs, 6.SCerevisiaeSystem.cs. - Si se pide solo EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.EColiSystem.cs. - Si se pide solo SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiaeComponent.cs, 4.SCerevisiaeSystem.cs - Si se pide 2 EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColi_1Component.cs, 4.EColi_2Component.cs, 5.EColi_1System.cs, 6.EColi_2System.cs. - Si se pide 2 SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiae_1Component.cs, 4.SCerevisiae_2Component.cs, 5.SCerevisiae_1System.cs, 6.SCerevisiae_2System.cs. El formato de cada script debe ser \"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\"."},{"role": "user","content": "Una SCerevisiae. La scerevisiae debe ser de color violeta, duplicarse cada 50 minutos y el hijo se separa del padre cuando alcanza el 80% del crecimiento."},{"role": "assistant","content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{const string pF=\"Assets/Resources/Prefabs\",mF=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(pF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+pF);}if(!AssetDatabase.IsValidFolder(mF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+mF);}CPAM(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5,5,5),new Vector3(90,0,0),0);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados.\");}static void CPAM(string n,PrimitiveType t,Vector3 s,Vector3 r,int c){var o=GameObject.CreatePrimitive(t);o.name=n;o.transform.rotation=Quaternion.Euler(r);o.transform.localScale=s;var col=o.GetComponent<Collider>();if(col!=null)Object.DestroyImmediate(col);if(c==0)o.AddComponent<SphereCollider>();var sh=Shader.Find(\"Universal Render Pipeline/Lit\");if(sh==null){Debug.LogError(\"Shader URP/Lit no encontrado.\");return;}var m=new Material(sh);m.color=new Color(0.5f,0,0.5f,1);AssetDatabase.CreateAsset(m,Path.Combine(mF,n+\".mat\"));AssetDatabase.SaveAssets();AssetDatabase.Refresh();o.GetComponent<Renderer>().sharedMaterial=m;PrefabUtility.SaveAsPrefabAsset(o,Path.Combine(pF,n+\".prefab\"));Object.DestroyImmediate(o);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 p){if(currentPrefabIndex>=prefabs.Count)return;var sQ=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=sQ.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");sQ.Dispose();return;}Entity s=sQ[currentPrefabIndex];sQ.Dispose();Entity pe=entityManager.GetComponentData<PrefabEntityComponent>(s).prefab;Entity e=entityManager.Instantiate(pe);float os=entityManager.GetComponentData<LocalTransform>(pe).Scale;quaternion or=entityManager.GetComponentData<LocalTransform>(pe).Rotation;float ry=UnityEngine.Random.Range(0f,360f);quaternion nr=math.mul(or,quaternion.RotateY(math.radians(ry)));float h=os*.5f;float3 ap=new float3(p.x,math.max(p.y+h,h),p.z);entityManager.SetComponentData(e,new LocalTransform{Position=ap,Rotation=nr,Scale=os});string n=prefabs[currentPrefabIndex].name;if(n==\"SCerevisiae\"){entityManager.AddComponentData(e,new SCerevisiaeComponent{TimeReference=3000f,SeparationThreshold=0.8f,MaxScale=5f,GrowthTime=0f,GrowthDuration=3000f*0.8f,TimeSinceLastDivision=0f,DivisionInterval=3000f*0.8f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});}else{Debug.LogWarning($\"No hay componente ECS para '{n}'\");}AddPhysicsComponents(e,n,os);Debug.Log($\"Entidad '{n}' creada en {ap}\");}private void AddPhysicsComponents(Entity e,string n,float s){BlobAssetReference<Unity.Physics.Collider>c=default;Material m=new Material{Restitution=0f};if(n==\"SCerevisiae\"){c=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=s*0.1f},CollisionFilter.Default,m);}else{Debug.LogWarning($\"No collider para '{n}'\");return;}entityManager.AddComponentData(e,new PhysicsCollider{Value=c});if(c.IsCreated){var mp=c.Value.MassProperties;entityManager.AddComponentData(e,PhysicsMass.CreateDynamic(mp,1f));}entityManager.AddComponentData(e,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(e,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(e,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{n}' (fricción alta, damping angular)\");}}3.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;public float3 GrowthDirection;}}4.SCerevisiaeSystem.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 rnd=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;SCerevisiaeComponent cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.IsInitialCell=false;cd.Parent=entity;cd.GrowthDirection=rnd;ct.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,ct);ecb.SetComponent(entityInQueryIndex,child,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,organism.GrowthDirection);transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre EColi, SCerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (EColi y SCerevisiae): 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.SCerevisiaeComponent.cs, 5.EColiSystem.cs, 6.SCerevisiaeSystem.cs. - Si se pide solo EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.EColiSystem.cs. - Si se pide solo SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiaeComponent.cs, 4.SCerevisiaeSystem.cs - Si se pide 2 EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColi_1Component.cs, 4.EColi_2Component.cs, 5.EColi_1System.cs, 6.EColi_2System.cs. - Si se pide 2 SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiae_1Component.cs, 4.SCerevisiae_2Component.cs, 5.SCerevisiae_1System.cs, 6.SCerevisiae_2System.cs. El formato de cada script debe ser \"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\"."},{"role": "user","content": "Dos EColi. La EColi_1 debe ser de color verde, duplicarse cada 12 minutos y el hijo se separa del padre cuando alcanza el 65% del crecimiento. La EColi_2 debe ser de color amarillo, duplicarse cada 16 minutos y el hijo se separa del padre cuando alcanza el 70% del crecimiento."},{"role": "assistant","content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{const string pF=\"Assets/Resources/Prefabs\", mF=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(pF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+pF);}if(!AssetDatabase.IsValidFolder(mF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+mF);}CPAM(\"EColi_1\",PrimitiveType.Capsule,new Vector3(.5f,1,.5f),new Vector3(90,0,0),1);CPAM(\"EColi_2\",PrimitiveType.Capsule,new Vector3(.5f,1,.5f),new Vector3(90,0,0),1);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados.\");}static void CPAM(string n,PrimitiveType t,Vector3 s,Vector3 r,int c){var o=GameObject.CreatePrimitive(t);o.name=n;o.transform.rotation=Quaternion.Euler(r);o.transform.localScale=s;var col=o.GetComponent<Collider>();if(col != null) Object.DestroyImmediate(col);if(c == 1) o.AddComponent<CapsuleCollider>();else o.AddComponent<SphereCollider>();var sh=Shader.Find(\"Universal Render Pipeline/Lit\");if(sh == null){Debug.LogError(\"Shader URP/Lit no encontrado.\");return;}var m=new Material(sh);if(n==\"EColi_1\") m.color=new Color(0,1,0,1); else if(n==\"EColi_2\") m.color=new Color(1,1,0,1); else m.color=Color.white;AssetDatabase.CreateAsset(m,Path.Combine(mF,n+\".mat\"));AssetDatabase.SaveAssets();AssetDatabase.Refresh();o.GetComponent<Renderer>().sharedMaterial=m;PrefabUtility.SaveAsPrefabAsset(o,Path.Combine(pF,n+\".prefab\"));Object.DestroyImmediate(o);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 p){if(currentPrefabIndex>=prefabs.Count)return;var sQ=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=sQ.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");sQ.Dispose();return;}Entity s=sQ[currentPrefabIndex];sQ.Dispose();Entity pe=entityManager.GetComponentData<PrefabEntityComponent>(s).prefab;Entity e=entityManager.Instantiate(pe);float os=entityManager.GetComponentData<LocalTransform>(pe).Scale;quaternion or=entityManager.GetComponentData<LocalTransform>(pe).Rotation;float ry=UnityEngine.Random.Range(0f,360f);quaternion nr=math.mul(or,quaternion.RotateY(math.radians(ry)));float h=os*.5f;float3 ap=new float3(p.x,math.max(p.y+h,h),p.z);entityManager.SetComponentData(e,new LocalTransform{Position=ap,Rotation=nr,Scale=os});string n=prefabs[currentPrefabIndex].name;switch(n){case \"EColi_1\":entityManager.AddComponentData(e,new EColi_1Component{TimeReference=720f,SeparationThreshold=0.65f,MaxScale=1f,GrowthTime=0f,GrowthDuration=720f*0.65f,TimeSinceLastDivision=0f,DivisionInterval=720f*0.65f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});entityManager.AddComponent(e,typeof(NonUniformScale));entityManager.SetComponentData(e,new NonUniformScale{Value=new float3(.5f,1f,.5f)});break;case \"EColi_2\":entityManager.AddComponentData(e,new EColi_2Component{TimeReference=960f,SeparationThreshold=0.70f,MaxScale=1f,GrowthTime=0f,GrowthDuration=960f*0.70f,TimeSinceLastDivision=0f,DivisionInterval=960f*0.70f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});entityManager.AddComponent(e,typeof(NonUniformScale));entityManager.SetComponentData(e,new NonUniformScale{Value=new float3(.5f,1f,.5f)});break;default:Debug.LogWarning($\"No hay componente ECS para '{n}'\");break;}AddPhysicsComponents(e,n,os);Debug.Log($\"Entidad '{n}' creada en {ap}\");}private void AddPhysicsComponents(Entity e,string n,float s){BlobAssetReference<Unity.Physics.Collider> c=default;Material m=new Material{Restitution=0f};switch(n){case \"EColi_1\":case \"EColi_2\":c=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-.5f,0),Vertex1=new float3(0,.5f,0),Radius=.25f},CollisionFilter.Default,m);break;default:Debug.LogWarning($\"No collider para '{n}'\");return;}entityManager.AddComponentData(e,new PhysicsCollider{Value=c});if(c.IsCreated){var mp=c.Value.MassProperties;entityManager.AddComponentData(e,PhysicsMass.CreateDynamic(mp,1f));}entityManager.AddComponentData(e,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(e,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(e,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{n}' (fricción alta, damping angular)\");}}3.EColi_1Component.cs{using Unity.Entities;using Unity.Mathematics;public struct EColi_1Component : IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;}}4.EColi_2Component.cs{using Unity.Entities;using Unity.Mathematics;public struct EColi_2Component : IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;}}5.EColi_1System.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime; if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int s=rng.NextFloat()<0.5f?1:-1;Entity c=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;EColi_1Component cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.HasGeneratedChild=false;cd.Parent=entity;cd.IsInitialCell=false;cd.SeparationSign=s;float3 u=math.mul(transform.Rotation,new float3(0,s,0));ct.Position=transform.Position+u*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,c,ct);ecb.SetComponent(entityInQueryIndex,c,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;ecb.SetComponent(entityInQueryIndex,entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});}else organism.Parent=Entity.Null;}}6.EColi_2System.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime; if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*54321);int s=rng.NextFloat()<0.5f?1:-1;Entity c=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;EColi_2Component cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.HasGeneratedChild=false;cd.Parent=entity;cd.IsInitialCell=false;cd.SeparationSign=s;float3 u=math.mul(transform.Rotation,new float3(0,s,0));ct.Position=transform.Position+u*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,c,ct);ecb.SetComponent(entityInQueryIndex,c,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;ecb.SetComponent(entityInQueryIndex,entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre EColi, SCerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (EColi y SCerevisiae): 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.SCerevisiaeComponent.cs, 5.EColiSystem.cs, 6.SCerevisiaeSystem.cs. - Si se pide solo EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.EColiSystem.cs. - Si se pide solo SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiaeComponent.cs, 4.SCerevisiaeSystem.cs - Si se pide 2 EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColi_1Component.cs, 4.EColi_2Component.cs, 5.EColi_1System.cs, 6.EColi_2System.cs. - Si se pide 2 SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiae_1Component.cs, 4.SCerevisiae_2Component.cs, 5.SCerevisiae_1System.cs, 6.SCerevisiae_2System.cs. El formato de cada script debe ser \"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\"."},{"role": "user","content": "Dos EColi. La EColi_1 debe ser de color verde esmeralda, duplicarse cada 15 minutos y el hijo se separa del padre cuando alcanza el 60% del crecimiento. La EColi_2 debe ser de color azul real, duplicarse cada 25 minutos y el hijo se separa del padre cuando alcanza el 70% del crecimiento."},{"role": "assistant","content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{const string pF=\"Assets/Resources/Prefabs\",mF=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(pF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+pF);}if(!AssetDatabase.IsValidFolder(mF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+mF);}CPAM(\"EColi_1\",PrimitiveType.Capsule,new Vector3(.5f,1,.5f),new Vector3(90,0,0),1);CPAM(\"EColi_2\",PrimitiveType.Capsule,new Vector3(.5f,1,.5f),new Vector3(90,0,0),1);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados.\");}static void CPAM(string n,PrimitiveType t,Vector3 s,Vector3 r,int c){var o=GameObject.CreatePrimitive(t);o.name=n;o.transform.rotation=Quaternion.Euler(r);o.transform.localScale=s;var col=o.GetComponent<Collider>();if(col!=null)Object.DestroyImmediate(col);if(c==1)o.AddComponent<CapsuleCollider>();var sh=Shader.Find(\"Universal Render Pipeline/Lit\");if(sh==null){Debug.LogError(\"Shader URP/Lit no encontrado.\");return;}var m=new Material(sh);if(n==\"EColi_1\") m.color=new Color(0.314f,0.784f,0.471f,1);else if(n==\"EColi_2\") m.color=new Color(0.255f,0.412f,0.882f,1);else m.color=Color.white;AssetDatabase.CreateAsset(m,Path.Combine(mF,n+\".mat\"));AssetDatabase.SaveAssets();AssetDatabase.Refresh();o.GetComponent<Renderer>().sharedMaterial=m;PrefabUtility.SaveAsPrefabAsset(o,Path.Combine(pF,n+\".prefab\"));Object.DestroyImmediate(o);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 p){if(currentPrefabIndex>=prefabs.Count)return;var sQ=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=sQ.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");sQ.Dispose();return;}Entity s=sQ[currentPrefabIndex];sQ.Dispose();Entity pe=entityManager.GetComponentData<PrefabEntityComponent>(s).prefab;Entity e=entityManager.Instantiate(pe);float os=entityManager.GetComponentData<LocalTransform>(pe).Scale;quaternion or=entityManager.GetComponentData<LocalTransform>(pe).Rotation;float ry=UnityEngine.Random.Range(0f,360f);quaternion nr=math.mul(or,quaternion.RotateY(math.radians(ry)));float h=os*.5f;float3 ap=new float3(p.x,math.max(p.y+h,h),p.z);entityManager.SetComponentData(e,new LocalTransform{Position=ap,Rotation=nr,Scale=os});string n=prefabs[currentPrefabIndex].name;switch(n){case \"EColi_1\":entityManager.AddComponentData(e,new EColi_1Component{TimeReference=900f,SeparationThreshold=0.6f,MaxScale=1f,GrowthTime=0f,GrowthDuration=900f*0.6f,TimeSinceLastDivision=0f,DivisionInterval=900f*0.6f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});entityManager.AddComponent(e,typeof(NonUniformScale));entityManager.SetComponentData(e,new NonUniformScale{Value=new float3(.5f,1f,.5f)});break;case \"EColi_2\":entityManager.AddComponentData(e,new EColi_2Component{TimeReference=1500f,SeparationThreshold=0.7f,MaxScale=1f,GrowthTime=0f,GrowthDuration=1500f*0.7f,TimeSinceLastDivision=0f,DivisionInterval=1500f*0.7f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});entityManager.AddComponent(e,typeof(NonUniformScale));entityManager.SetComponentData(e,new NonUniformScale{Value=new float3(.5f,1f,.5f)});break;default:Debug.LogWarning($\"No hay componente ECS para '{n}'\");break;}AddPhysicsComponents(e,n,os);Debug.Log($\"Entidad '{n}' creada en {ap}\");}private void AddPhysicsComponents(Entity e,string n,float s){BlobAssetReference<Unity.Physics.Collider>c=default;Material m=new Material{Restitution=0f};switch(n){case \"EColi_1\":case \"EColi_2\":c=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-.5f,0),Vertex1=new float3(0,.5f,0),Radius=.25f},CollisionFilter.Default,m);break;default:Debug.LogWarning($\"No collider para '{n}'\");return;}entityManager.AddComponentData(e,new PhysicsCollider{Value=c});if(c.IsCreated){var mp=c.Value.MassProperties;entityManager.AddComponentData(e,PhysicsMass.CreateDynamic(mp,1f));}entityManager.AddComponentData(e,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(e,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(e,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{n}' (fricción alta, damping angular)\");}}3.EColi_1Component.cs{using Unity.Entities;using Unity.Mathematics;public struct EColi_1Component:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;}}4.EColi_2Component.cs{using Unity.Entities;using Unity.Mathematics;public struct EColi_2Component:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;}}5.EColi_1System.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int s=rng.NextFloat()<0.5f?1:-1;Entity c=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;EColi_1Component cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.HasGeneratedChild=false;cd.Parent=entity;cd.IsInitialCell=false;cd.SeparationSign=s;float3 u=math.mul(transform.Rotation,new float3(0,s,0));ct.Position=transform.Position+u*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,c,ct);ecb.SetComponent(entityInQueryIndex,c,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;ecb.SetComponent(entityInQueryIndex,entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});}else organism.Parent=Entity.Null;}}6.EColi_2System.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*54321);int s=rng.NextFloat()<0.5f?1:-1;Entity c=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;EColi_2Component cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.HasGeneratedChild=false;cd.Parent=entity;cd.IsInitialCell=false;cd.SeparationSign=s;float3 u=math.mul(transform.Rotation,new float3(0,s,0));ct.Position=transform.Position+u*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,c,ct);ecb.SetComponent(entityInQueryIndex,c,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;ecb.SetComponent(entityInQueryIndex,entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre EColi, SCerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (EColi y SCerevisiae): 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.SCerevisiaeComponent.cs, 5.EColiSystem.cs, 6.SCerevisiaeSystem.cs. - Si se pide solo EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.EColiSystem.cs. - Si se pide solo SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiaeComponent.cs, 4.SCerevisiaeSystem.cs - Si se pide 2 EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColi_1Component.cs, 4.EColi_2Component.cs, 5.EColi_1System.cs, 6.EColi_2System.cs. - Si se pide 2 SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiae_1Component.cs, 4.SCerevisiae_2Component.cs, 5.SCerevisiae_1System.cs, 6.SCerevisiae_2System.cs. El formato de cada script debe ser \"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\"."},{"role": "user","content": "Dos SCerevisiae. La SCerevisiae_1 debe ser de color naranja, duplicarse cada 40 minutos y el hijo se separa del padre cuando alcanza el 80% del crecimiento. La SCerevisiae_2 debe ser de color cian, duplicarse cada 50 minutos y el hijo se separa del padre cuando alcanza el 85% del crecimiento."},{"role": "assistant","content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{const string pF=\"Assets/Resources/Prefabs\",mF=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(pF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+pF);}if(!AssetDatabase.IsValidFolder(mF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+mF);}CPAM(\"SCerevisiae_1\",PrimitiveType.Sphere,new Vector3(5,5,5),new Vector3(90,0,0),0);CPAM(\"SCerevisiae_2\",PrimitiveType.Sphere,new Vector3(5,5,5),new Vector3(90,0,0),0);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados.\");}static void CPAM(string n,PrimitiveType t,Vector3 s,Vector3 r,int c){var o=GameObject.CreatePrimitive(t);o.name=n;o.transform.rotation=Quaternion.Euler(r);o.transform.localScale=s;var col=o.GetComponent<Collider>();if(col!=null)Object.DestroyImmediate(col);if(c==0)o.AddComponent<SphereCollider>();var sh=Shader.Find(\"Universal Render Pipeline/Lit\");if(sh==null){Debug.LogError(\"Shader URP/Lit no encontrado.\");return;}var m=new Material(sh);if(n==\"SCerevisiae_1\") m.color=new Color(1,0.5f,0,1);else if(n==\"SCerevisiae_2\") m.color=new Color(0,1,1,1);else m.color=Color.white;AssetDatabase.CreateAsset(m,Path.Combine(mF,n+\".mat\"));AssetDatabase.SaveAssets();AssetDatabase.Refresh();o.GetComponent<Renderer>().sharedMaterial=m;PrefabUtility.SaveAsPrefabAsset(o,Path.Combine(pF,n+\".prefab\"));Object.DestroyImmediate(o);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 p){if(currentPrefabIndex>=prefabs.Count)return;var sQ=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=sQ.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");sQ.Dispose();return;}Entity s=sQ[currentPrefabIndex];sQ.Dispose();Entity pe=entityManager.GetComponentData<PrefabEntityComponent>(s).prefab;Entity e=entityManager.Instantiate(pe);float os=entityManager.GetComponentData<LocalTransform>(pe).Scale;quaternion or=entityManager.GetComponentData<LocalTransform>(pe).Rotation;float ry=UnityEngine.Random.Range(0f,360f);quaternion nr=math.mul(or,quaternion.RotateY(math.radians(ry)));float h=os*.5f;float3 ap=new float3(p.x,math.max(p.y+h,h),p.z);entityManager.SetComponentData(e,new LocalTransform{Position=ap,Rotation=nr,Scale=os});string n=prefabs[currentPrefabIndex].name;switch(n){case \"SCerevisiae_1\":entityManager.AddComponentData(e,new SCerevisiae_1Component{TimeReference=2400f,SeparationThreshold=0.80f,MaxScale=5f,GrowthTime=0f,GrowthDuration=2400f*0.8f,TimeSinceLastDivision=0f,DivisionInterval=2400f*0.8f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case \"SCerevisiae_2\":entityManager.AddComponentData(e,new SCerevisiae_2Component{TimeReference=3000f,SeparationThreshold=0.85f,MaxScale=5f, GrowthTime=0f,GrowthDuration=3000f*0.85f,TimeSinceLastDivision=0f,DivisionInterval=3000f*0.85f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{n}'\");break;}AddPhysicsComponents(e,n,os);Debug.Log($\"Entidad '{n}' creada en {ap}\");}private void AddPhysicsComponents(Entity e,string n,float s){BlobAssetReference<Unity.Physics.Collider>c=default;Material m=new Material{Restitution=0f};switch(n){case \"SCerevisiae_1\":case \"SCerevisiae_2\":c=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=s*0.1f},CollisionFilter.Default,m);break;default:Debug.LogWarning($\"No collider para '{n}'\");return;}entityManager.AddComponentData(e,new PhysicsCollider{Value=c});if(c.IsCreated){var mp=c.Value.MassProperties;entityManager.AddComponentData(e,PhysicsMass.CreateDynamic(mp,1f));}entityManager.AddComponentData(e,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(e,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(e,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{n}' (fricción alta, damping angular)\");}}3.SCerevisiae_1Component.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiae_1Component:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;public float3 GrowthDirection;}}4.SCerevisiae_2Component.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiae_2Component:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;public float3 GrowthDirection;}}5.SCerevisiae_1System.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 rnd=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;SCerevisiae_1Component cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.IsInitialCell=false;cd.Parent=entity;cd.GrowthDirection=rnd;ct.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,ct);ecb.SetComponent(entityInQueryIndex,child,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,organism.GrowthDirection);transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiae_2System.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*54321);float angle=rng.NextFloat(0f,math.PI*2f);float3 rnd=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;SCerevisiae_2Component cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.IsInitialCell=false;cd.Parent=entity;cd.GrowthDirection=rnd;ct.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,ct);ecb.SetComponent(entityInQueryIndex,child,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,organism.GrowthDirection);transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre EColi, SCerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (EColi y SCerevisiae): 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.SCerevisiaeComponent.cs, 5.EColiSystem.cs, 6.SCerevisiaeSystem.cs. - Si se pide solo EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColiComponent.cs, 4.EColiSystem.cs. - Si se pide solo SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiaeComponent.cs, 4.SCerevisiaeSystem.cs - Si se pide 2 EColi: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.EColi_1Component.cs, 4.EColi_2Component.cs, 5.EColi_1System.cs, 6.EColi_2System.cs. - Si se pide 2 SCerevisiae: 1.PrefabMaterialCreator.cs, 2.CreatePrefabsOnClick.cs, 3.SCerevisiae_1Component.cs, 4.SCerevisiae_2Component.cs, 5.SCerevisiae_1System.cs, 6.SCerevisiae_2System.cs. El formato de cada script debe ser \"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\"."},{"role": "user","content": "Dos SCerevisiae. La SCerevisiae_1 debe ser de color naranja, duplicarse cada 40 minutos y el hijo se separa del padre cuando alcanza el 75% del crecimiento. La SCerevisiae_2 debe ser de color turquesa, duplicarse cada 55 minutos y el hijo se separa del padre cuando alcanza el 85% del crecimiento."},{"role": "assistant","content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{const string pF=\"Assets/Resources/Prefabs\",mF=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(pF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+pF);}if(!AssetDatabase.IsValidFolder(mF)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+mF);}CPAM(\"SCerevisiae_1\",PrimitiveType.Sphere,new Vector3(5,5,5),new Vector3(90,0,0),0);CPAM(\"SCerevisiae_2\",PrimitiveType.Sphere,new Vector3(5,5,5),new Vector3(90,0,0),0);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados.\");}static void CPAM(string n,PrimitiveType t,Vector3 s,Vector3 r,int c){var o=GameObject.CreatePrimitive(t);o.name=n;o.transform.rotation=Quaternion.Euler(r);o.transform.localScale=s;var col=o.GetComponent<Collider>();if(col!=null)Object.DestroyImmediate(col);if(c==0)o.AddComponent<SphereCollider>();var sh=Shader.Find(\"Universal Render Pipeline/Lit\");if(sh==null){Debug.LogError(\"Shader URP/Lit no encontrado.\");return;}var m=new Material(sh);if(n==\"SCerevisiae_1\") m.color=new Color(1,0.65f,0,1);else if(n==\"SCerevisiae_2\") m.color=new Color(0.25f,0.88f,0.82f,1);else m.color=Color.white;AssetDatabase.CreateAsset(m,Path.Combine(mF,n+\".mat\"));AssetDatabase.SaveAssets();AssetDatabase.Refresh();o.GetComponent<Renderer>().sharedMaterial=m;PrefabUtility.SaveAsPrefabAsset(o,Path.Combine(pF,n+\".prefab\"));Object.DestroyImmediate(o);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 p){if(currentPrefabIndex>=prefabs.Count)return;var sQ=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=sQ.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");sQ.Dispose();return;}Entity s=sQ[currentPrefabIndex];sQ.Dispose();Entity pe=entityManager.GetComponentData<PrefabEntityComponent>(s).prefab;Entity e=entityManager.Instantiate(pe);float os=entityManager.GetComponentData<LocalTransform>(pe).Scale;quaternion or=entityManager.GetComponentData<LocalTransform>(pe).Rotation;float ry=UnityEngine.Random.Range(0f,360f);quaternion nr=math.mul(or,quaternion.RotateY(math.radians(ry)));float h=os*.5f;float3 ap=new float3(p.x,math.max(p.y+h,h),p.z);entityManager.SetComponentData(e,new LocalTransform{Position=ap,Rotation=nr,Scale=os});string n=prefabs[currentPrefabIndex].name;switch(n){case \"SCerevisiae_1\":entityManager.AddComponentData(e,new SCerevisiae_1Component{TimeReference=2400f,SeparationThreshold=0.75f,MaxScale=5f,GrowthTime=0f,GrowthDuration=2400f*0.75f,TimeSinceLastDivision=0f,DivisionInterval=2400f*0.75f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case \"SCerevisiae_2\":entityManager.AddComponentData(e,new SCerevisiae_2Component{TimeReference=3300f,SeparationThreshold=0.85f,MaxScale=5f,GrowthTime=0f,GrowthDuration=3300f*0.85f,TimeSinceLastDivision=0f,DivisionInterval=3300f*0.85f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{n}'\");break;}AddPhysicsComponents(e,n,os);Debug.Log($\"Entidad '{n}' creada en {ap}\");}private void AddPhysicsComponents(Entity e,string n,float s){BlobAssetReference<Unity.Physics.Collider>c=default;Material m=new Material{Restitution=0f};switch(n){case \"SCerevisiae_1\":case \"SCerevisiae_2\":c=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=s*0.1f},CollisionFilter.Default,m);break;default:Debug.LogWarning($\"No collider para '{n}'\");return;}entityManager.AddComponentData(e,new PhysicsCollider{Value=c});if(c.IsCreated){var mp=c.Value.MassProperties;entityManager.AddComponentData(e,PhysicsMass.CreateDynamic(mp,1f));}entityManager.AddComponentData(e,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(e,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(e,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{n}' (fricción alta, damping angular)\");}}3.SCerevisiae_1Component.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiae_1Component:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;public float3 GrowthDirection;}}4.SCerevisiae_2Component.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiae_2Component:IComponentData{public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold;public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized;public Entity Parent;public int SeparationSign;public float3 GrowthDirection;}}5.SCerevisiae_1System.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 rnd=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;SCerevisiae_1Component cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.IsInitialCell=false;cd.Parent=entity;cd.GrowthDirection=rnd;ct.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,ct);ecb.SetComponent(entityInQueryIndex,child,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,organism.GrowthDirection);transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiae_2System.cs{if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*54321);float angle=rng.NextFloat(0f,math.PI*2f);float3 rnd=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform ct=transform;ct.Scale=0.01f;SCerevisiae_2Component cd=organism;cd.TimeReferenceInitialized=false;cd.GrowthTime=0f;cd.TimeSinceLastDivision=0f;cd.IsInitialCell=false;cd.Parent=entity;cd.GrowthDirection=rnd;ct.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,ct);ecb.SetComponent(entityInQueryIndex,child,cd);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData pd)){if(transform.Scale<organism.SeparationThreshold*maxScale){float sp=math.smoothstep(0f,1f,math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f));float off=math.lerp(0f,0.9f+organism.SeparationThreshold,sp);float3 sd=math.mul(pd.Rotation,organism.GrowthDirection);transform.Position=pd.Position+sd*off;transform.Rotation=pd.Rotation;}else organism.Parent=Entity.Null;}}"}]}