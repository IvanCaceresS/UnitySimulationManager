{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre e.coli, s.cerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado:\n - Si se piden ambas (e.coli y s.cerevisiae):\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.EColiComponent.cs\n   4.SCerevisiaeComponent.cs\n   5.EColiSystem.cs\n   6.SCerevisiaeSystem.cs\n - Si se pide solo e.coli:\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.EColiComponent.cs\n   4.EColiSystem.cs\n - Si se pide solo s.cerevisiae:\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.SCerevisiaeComponent.cs\n   4.SCerevisiaeSystem.cs\n\nEl formato de cada script debe ser:\n\"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores (es decir, que no mencione e.coli y/o s.cerevisiae, color, tiempo de duplicación y porcentaje de separación) será respondida con: \"ERROR FORMATO DE PREGUNTA.\". Y recuerda, responde tal cual como se te entrenó"},{"role": "user","content": "Una e.coli y una s.cerevisiae. La e.coli debe ser de color verde, duplicarse cada 20 minutos y el hijo se separa del padre cuando alcanza el 70% del crecimiento. La scerevisiae debe ser de color azul, duplicarse cada 90 minutos y el hijo se separa del padre cuando alcanza el 70% del crecimiento."},{"role": "assistant","content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{private const string prefabFolder=\"Assets/Resources/Prefabs\";private const string materialFolder=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(prefabFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+prefabFolder);}if(!AssetDatabase.IsValidFolder(materialFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+materialFolder);}CreatePrefabAndMaterial(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5f,5f,5f),new Vector3(90f,0f,0f),ColliderType.Sphere);CreatePrefabAndMaterial(\"EColi\",PrimitiveType.Capsule,new Vector3(0.5f,2f,0.5f),new Vector3(90f,0f,0f),ColliderType.Capsule);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados exitosamente.\");}private enum ColliderType{Sphere,Capsule}private static void CreatePrefabAndMaterial(string name,PrimitiveType primitiveType,Vector3 scale,Vector3 rotation,ColliderType colliderType){GameObject obj=GameObject.CreatePrimitive(primitiveType);obj.name=name;obj.transform.rotation=Quaternion.Euler(rotation);obj.transform.localScale=scale;Collider existingCollider=obj.GetComponent<Collider>();if(existingCollider!=null)Object.DestroyImmediate(existingCollider);switch(colliderType){case ColliderType.Sphere:obj.AddComponent<SphereCollider>();break;case ColliderType.Capsule:obj.AddComponent<CapsuleCollider>();break;}Shader shader=Shader.Find(\"Universal Render Pipeline/Lit\");if(shader==null){Debug.LogError(\"Shader 'Universal Render Pipeline/Lit' no se encontró. Asegúrate de que URP esté instalado y configurado.\");return;}Material mat=new Material(shader);if(name==\"SCerevisiae\")mat.color = new Color(0f, 0f, 1f, 1f);else if(name==\"EColi\")mat.color = new Color(0f, 1f, 0f, 1f);else mat.color = new Color(1f, 1f, 1f, 1f);string matPath=Path.Combine(materialFolder,name+\".mat\");AssetDatabase.CreateAsset(mat,matPath);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Renderer renderer=obj.GetComponent<Renderer>();if(renderer!=null)renderer.sharedMaterial=mat;string prefabPath=Path.Combine(prefabFolder,name+\".prefab\");PrefabUtility.SaveAsPrefabAsset(obj,prefabPath);Object.DestroyImmediate(obj);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 position){if(currentPrefabIndex>=prefabs.Count)return;NativeArray<Entity>spawnerEntities=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=spawnerEntities.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");spawnerEntities.Dispose();return;}Entity spawner=spawnerEntities[currentPrefabIndex];spawnerEntities.Dispose();Entity prefabEntity=entityManager.GetComponentData<PrefabEntityComponent>(spawner).prefab;Entity entity=entityManager.Instantiate(prefabEntity);float originalScale=entityManager.GetComponentData<LocalTransform>(prefabEntity).Scale;quaternion originalRotation=entityManager.GetComponentData<LocalTransform>(prefabEntity).Rotation;float randYRot=UnityEngine.Random.Range(0f,360f);quaternion newRotation=math.mul(originalRotation,quaternion.RotateY(math.radians(randYRot)));float heightOffset=originalScale*0.5f;float3 adjustedPosition=new float3(position.x,math.max(position.y+heightOffset,heightOffset),position.z);entityManager.SetComponentData(entity,new LocalTransform{Position=adjustedPosition,Rotation=newRotation,Scale=originalScale});string prefabName=prefabs[currentPrefabIndex].name;switch(prefabName){case\"EColi\":entityManager.AddComponentData(entity,new EColiComponent{TimeReference=1200f,SeparationThreshold=0.7f,MaxScale=1.0f,GrowthTime=0f,GrowthDuration=1200f*0.7f,TimeSinceLastDivision=0f,DivisionInterval=1200f*0.7f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case\"SCerevisiae\":entityManager.AddComponentData(entity,new SCerevisiaeComponent{TimeReference=5400f,SeparationThreshold=0.7f,MaxScale=5.0f,GrowthTime=0f,GrowthDuration=5400f*0.7f,TimeSinceLastDivision=0f,DivisionInterval=5400f*0.7f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{prefabName}'\");break;}AddPhysicsComponents(entity,prefabName,originalScale);Debug.Log($\"Entidad '{prefabName}' creada en {adjustedPosition}\");}private void AddPhysicsComponents(Entity entity,string prefabName,float scale){BlobAssetReference<Unity.Physics.Collider>collider=default;Material mat=new Material{Friction=8f,Restitution=0f};switch(prefabName){case\"EColi\":collider=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-scale,0),Vertex1=new float3(0,scale,0),Radius=0.25f},CollisionFilter.Default,mat);break;case\"SCerevisiae\":collider=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=scale*0.1f},CollisionFilter.Default,mat);break;default:Debug.LogWarning($\"No collider para '{prefabName}'\");return;}entityManager.AddComponentData(entity,new PhysicsCollider{Value=collider});if(collider.IsCreated){var massProps=collider.Value.MassProperties;entityManager.AddComponentData(entity,PhysicsMass.CreateDynamic(massProps,1f));}entityManager.AddComponentData(entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(entity,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(entity,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{prefabName}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref EColiComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int sign=rng.NextFloat()<0.5f?1:-1;Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;EColiComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.HasGeneratedChild=false;childData.IsInitialCell=false;childData.Parent=entity;childData.SeparationSign=sign;float3 upDir=math.mul(transform.Rotation,new float3(0,sign,0));childTransform.Position=transform.Position+upDir*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float offset=math.lerp(0f,parentData.Scale*4.9f,transform.Scale/maxScale);float3 up=math.mul(parentData.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=parentData.Position+up*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref SCerevisiaeComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 randomDir=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;SCerevisiaeComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.IsInitialCell=false;childData.Parent=entity;childData.GrowthDirection=randomDir;childTransform.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float ratio=math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f);float offset=(parentData.Scale*0.5f)*ratio;float3 worldDir=math.mul(parentData.Rotation,organism.GrowthDirection);transform.Position=parentData.Position+worldDir*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre e.coli, s.cerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado:\n - Si se piden ambas (e.coli y s.cerevisiae):\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.EColiComponent.cs\n   4.SCerevisiaeComponent.cs\n   5.EColiSystem.cs\n   6.SCerevisiaeSystem.cs\n - Si se pide solo e.coli:\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.EColiComponent.cs\n   4.EColiSystem.cs\n - Si se pide solo s.cerevisiae:\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.SCerevisiaeComponent.cs\n   4.SCerevisiaeSystem.cs\n\nEl formato de cada script debe ser:\n\"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\". Y recuerda, responde tal cual como se te entrenó"}, {"role": "user", "content": "Una e.coli y una s.cerevisiae. La e.coli debe ser de color rojo, duplicarse cada 15 minutos y el hijo se separa del padre cuando alcanza el 60% del crecimiento. La scerevisiae debe ser de color magenta, duplicarse cada 30 minutos y el hijo se separa del padre cuando alcanza el 80% del crecimiento."}, {"role": "assistant", "content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{private const string prefabFolder=\"Assets/Resources/Prefabs\";private const string materialFolder=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(prefabFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+prefabFolder);}if(!AssetDatabase.IsValidFolder(materialFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+materialFolder);}CreatePrefabAndMaterial(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5f,5f,5f),new Vector3(90f,0f,0f),ColliderType.Sphere);CreatePrefabAndMaterial(\"EColi\",PrimitiveType.Capsule,new Vector3(0.5f,2f,0.5f),new Vector3(90f,0f,0f),ColliderType.Capsule);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados exitosamente.\");}private enum ColliderType{Sphere,Capsule}private static void CreatePrefabAndMaterial(string name,PrimitiveType primitiveType,Vector3 scale,Vector3 rotation,ColliderType colliderType){GameObject obj=GameObject.CreatePrimitive(primitiveType);obj.name=name;obj.transform.rotation=Quaternion.Euler(rotation);obj.transform.localScale=scale;Collider existingCollider=obj.GetComponent<Collider>();if(existingCollider!=null)Object.DestroyImmediate(existingCollider);switch(colliderType){case ColliderType.Sphere:obj.AddComponent<SphereCollider>();break;case ColliderType.Capsule:obj.AddComponent<CapsuleCollider>();break;}Shader shader=Shader.Find(\"Universal Render Pipeline/Lit\");if(shader==null){Debug.LogError(\"Shader 'Universal Render Pipeline/Lit' no se encontró. Asegúrate de que URP esté instalado y configurado.\");return;}Material mat=new Material(shader);if(name==\"SCerevisiae\")mat.color = new Color(1f, 0f, 1f, 1f);else if(name==\"EColi\")mat.color = new Color(1f, 0f, 0f, 1f);else mat.color = new Color(1f, 1f, 1f, 1f);string matPath=Path.Combine(materialFolder,name+\".mat\");AssetDatabase.CreateAsset(mat,matPath);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Renderer renderer=obj.GetComponent<Renderer>();if(renderer!=null)renderer.sharedMaterial=mat;string prefabPath=Path.Combine(prefabFolder,name+\".prefab\");PrefabUtility.SaveAsPrefabAsset(obj,prefabPath);Object.DestroyImmediate(obj);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 position){if(currentPrefabIndex>=prefabs.Count)return;NativeArray<Entity>spawnerEntities=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=spawnerEntities.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");spawnerEntities.Dispose();return;}Entity spawner=spawnerEntities[currentPrefabIndex];spawnerEntities.Dispose();Entity prefabEntity=entityManager.GetComponentData<PrefabEntityComponent>(spawner).prefab;Entity entity=entityManager.Instantiate(prefabEntity);float originalScale=entityManager.GetComponentData<LocalTransform>(prefabEntity).Scale;quaternion originalRotation=entityManager.GetComponentData<LocalTransform>(prefabEntity).Rotation;float randYRot=UnityEngine.Random.Range(0f,360f);quaternion newRotation=math.mul(originalRotation,quaternion.RotateY(math.radians(randYRot)));float heightOffset=originalScale*0.5f;float3 adjustedPosition=new float3(position.x,math.max(position.y+heightOffset,heightOffset),position.z);entityManager.SetComponentData(entity,new LocalTransform{Position=adjustedPosition,Rotation=newRotation,Scale=originalScale});string prefabName=prefabs[currentPrefabIndex].name;switch(prefabName){case \"EColi\":entityManager.AddComponentData(entity,new EColiComponent{TimeReference=900f,SeparationThreshold=0.6f,MaxScale=1.0f,GrowthTime=0f,GrowthDuration=900f*0.6f,TimeSinceLastDivision=0f,DivisionInterval=900f*0.6f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case \"SCerevisiae\":entityManager.AddComponentData(entity,new SCerevisiaeComponent{TimeReference=1800f,SeparationThreshold=0.8f,MaxScale=5.0f,GrowthTime=0f,GrowthDuration=1800f*0.8f,TimeSinceLastDivision=0f,DivisionInterval=1800f*0.8f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{prefabName}'\");break;}AddPhysicsComponents(entity,prefabName,originalScale);Debug.Log($\"Entidad '{prefabName}' creada en {adjustedPosition}\");}private void AddPhysicsComponents(Entity entity,string prefabName,float scale){BlobAssetReference<Unity.Physics.Collider>collider=default;Material mat=new Material{Friction=8f,Restitution=0f};switch(prefabName){case \"EColi\":collider=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-scale,0),Vertex1=new float3(0,scale,0),Radius=0.25f},CollisionFilter.Default,mat);break;case \"SCerevisiae\":collider=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=scale*0.1f},CollisionFilter.Default,mat);break;default:Debug.LogWarning($\"No collider para '{prefabName}'\");return;}entityManager.AddComponentData(entity,new PhysicsCollider{Value=collider});if(collider.IsCreated){var massProps=collider.Value.MassProperties;entityManager.AddComponentData(entity,PhysicsMass.CreateDynamic(massProps,1f));}entityManager.AddComponentData(entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(entity,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(entity,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{prefabName}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref EColiComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int sign=rng.NextFloat()<0.5f?1:-1;Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;EColiComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.HasGeneratedChild=false;childData.IsInitialCell=false;childData.Parent=entity;childData.SeparationSign=sign;float3 upDir=math.mul(transform.Rotation,new float3(0,sign,0));childTransform.Position=transform.Position+upDir*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float offset=math.lerp(0f,parentData.Scale*4.9f,transform.Scale/maxScale);float3 up=math.mul(parentData.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=parentData.Position+up*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref SCerevisiaeComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 randomDir=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;SCerevisiaeComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.IsInitialCell=false;childData.Parent=entity;childData.GrowthDirection=randomDir;childTransform.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float ratio=math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f);float offset=(parentData.Scale*0.5f)*ratio;float3 worldDir=math.mul(parentData.Rotation,organism.GrowthDirection);transform.Position=parentData.Position+worldDir*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre e.coli, s.cerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado:\n - Si se piden ambas (e.coli y s.cerevisiae):\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.EColiComponent.cs\n   4.SCerevisiaeComponent.cs\n   5.EColiSystem.cs\n   6.SCerevisiaeSystem.cs\n - Si se pide solo e.coli:\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.EColiComponent.cs\n   4.EColiSystem.cs\n - Si se pide solo s.cerevisiae:\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.SCerevisiaeComponent.cs\n   4.SCerevisiaeSystem.cs\n\nEl formato de cada script debe ser:\n\"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\". Y recuerda, responde tal cual como se te entrenó"}, {"role": "user", "content": "Una e.coli y una s.cerevisiae. La e.coli debe ser de color amarillo, duplicarse cada 10 minutos y el hijo se separa del padre cuando alcanza el 50% del crecimiento. La scerevisiae debe ser de color cian, duplicarse cada 120 minutos y el hijo se separa del padre cuando alcanza el 90% del crecimiento."}, {"role": "assistant", "content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{private const string prefabFolder=\"Assets/Resources/Prefabs\";private const string materialFolder=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(prefabFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+prefabFolder);}if(!AssetDatabase.IsValidFolder(materialFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+materialFolder);}CreatePrefabAndMaterial(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5f,5f,5f),new Vector3(90f,0f,0f),ColliderType.Sphere);CreatePrefabAndMaterial(\"EColi\",PrimitiveType.Capsule,new Vector3(0.5f,2f,0.5f),new Vector3(90f,0f,0f),ColliderType.Capsule);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados exitosamente.\");}private enum ColliderType{Sphere,Capsule}private static void CreatePrefabAndMaterial(string name,PrimitiveType primitiveType,Vector3 scale,Vector3 rotation,ColliderType colliderType){GameObject obj=GameObject.CreatePrimitive(primitiveType);obj.name=name;obj.transform.rotation=Quaternion.Euler(rotation);obj.transform.localScale=scale;Collider existingCollider=obj.GetComponent<Collider>();if(existingCollider!=null)Object.DestroyImmediate(existingCollider);switch(colliderType){case ColliderType.Sphere:obj.AddComponent<SphereCollider>();break;case ColliderType.Capsule:obj.AddComponent<CapsuleCollider>();break;}Shader shader=Shader.Find(\"Universal Render Pipeline/Lit\");if(shader==null){Debug.LogError(\"Shader 'Universal Render Pipeline/Lit' no se encontró. Asegúrate de que URP esté instalado y configurado.\");return;}Material mat=new Material(shader);if(name==\"SCerevisiae\")mat.color = new Color(0f, 1f, 1f, 1f);else if(name==\"EColi\")mat.color = new Color(1f, 0.92f, 0.016f, 1f);else mat.color = new Color(1f, 1f, 1f, 1f);string matPath=Path.Combine(materialFolder,name+\".mat\");AssetDatabase.CreateAsset(mat,matPath);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Renderer renderer=obj.GetComponent<Renderer>();if(renderer!=null)renderer.sharedMaterial=mat;string prefabPath=Path.Combine(prefabFolder,name+\".prefab\");PrefabUtility.SaveAsPrefabAsset(obj,prefabPath);Object.DestroyImmediate(obj);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 position){if(currentPrefabIndex>=prefabs.Count)return;NativeArray<Entity>spawnerEntities=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=spawnerEntities.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");spawnerEntities.Dispose();return;}Entity spawner=spawnerEntities[currentPrefabIndex];spawnerEntities.Dispose();Entity prefabEntity=entityManager.GetComponentData<PrefabEntityComponent>(spawner).prefab;Entity entity=entityManager.Instantiate(prefabEntity);float originalScale=entityManager.GetComponentData<LocalTransform>(prefabEntity).Scale;quaternion originalRotation=entityManager.GetComponentData<LocalTransform>(prefabEntity).Rotation;float randYRot=UnityEngine.Random.Range(0f,360f);quaternion newRotation=math.mul(originalRotation,quaternion.RotateY(math.radians(randYRot)));float heightOffset=originalScale*0.5f;float3 adjustedPosition=new float3(position.x,math.max(position.y+heightOffset,heightOffset),position.z);entityManager.SetComponentData(entity,new LocalTransform{Position=adjustedPosition,Rotation=newRotation,Scale=originalScale});string prefabName=prefabs[currentPrefabIndex].name;switch(prefabName){case \"EColi\":entityManager.AddComponentData(entity,new EColiComponent{TimeReference=600f,SeparationThreshold=0.5f,MaxScale=1.0f,GrowthTime=0f,GrowthDuration=600f*0.5f,TimeSinceLastDivision=0f,DivisionInterval=600f*0.5f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case \"SCerevisiae\":entityManager.AddComponentData(entity,new SCerevisiaeComponent{TimeReference=7200f,SeparationThreshold=0.9f,MaxScale=5.0f,GrowthTime=0f,GrowthDuration=7200f*0.9f,TimeSinceLastDivision=0f,DivisionInterval=7200f*0.9f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{prefabName}'\");break;}AddPhysicsComponents(entity,prefabName,originalScale);Debug.Log($\"Entidad '{prefabName}' creada en {adjustedPosition}\");}private void AddPhysicsComponents(Entity entity,string prefabName,float scale){BlobAssetReference<Unity.Physics.Collider>collider=default;Material mat=new Material{Friction=8f,Restitution=0f};switch(prefabName){case \"EColi\":collider=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-scale,0),Vertex1=new float3(0,scale,0),Radius=0.25f},CollisionFilter.Default,mat);break;case \"SCerevisiae\":collider=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=scale*0.1f},CollisionFilter.Default,mat);break;default:Debug.LogWarning($\"No collider para '{prefabName}'\");return;}entityManager.AddComponentData(entity,new PhysicsCollider{Value=collider});if(collider.IsCreated){var massProps=collider.Value.MassProperties;entityManager.AddComponentData(entity,PhysicsMass.CreateDynamic(massProps,1f));}entityManager.AddComponentData(entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(entity,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(entity,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{prefabName}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{using Unity.Burst;using Unity.Collections;using Unity.Entities;using Unity.Jobs;using Unity.Mathematics;using Unity.Physics;using Unity.Physics.Extensions;using Unity.Transforms;using UnityEngine;[BurstCompile][UpdateInGroup(typeof(SimulationSystemGroup))]public partial class EColiSystem:SystemBase{protected override void OnUpdate(){if(!GameStateManager.IsSetupComplete||GameStateManager.IsPaused)return;float deltaTime=GameStateManager.DeltaTime;EntityQuery query=GetEntityQuery(typeof(LocalTransform));int capacity=math.max(1024,query.CalculateEntityCount()*2);NativeParallelHashMap<Entity,ParentData> parentMap=new NativeParallelHashMap<Entity,ParentData>(capacity,Allocator.TempJob);var parentMapWriter=parentMap.AsParallelWriter();Dependency=Entities.ForEach((Entity e,in LocalTransform transform)=>{parentMapWriter.TryAdd(e,new ParentData{Position=transform.Position,Rotation=transform.Rotation,Scale=transform.Scale});}).ScheduleParallel(Dependency);EndSimulationEntityCommandBufferSystem ecbSystem=World.GetOrCreateSystemManaged<EndSimulationEntityCommandBufferSystem>();var ecb=ecbSystem.CreateCommandBuffer().AsParallelWriter();Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref EColiComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int sign=rng.NextFloat()<0.5f?1:-1;Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;EColiComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.HasGeneratedChild=false;childData.IsInitialCell=false;childData.Parent=entity;childData.SeparationSign=sign;float3 upDir=math.mul(transform.Rotation,new float3(0,sign,0));childTransform.Position=transform.Position+upDir*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float offset=math.lerp(0f,parentData.Scale*4.9f,transform.Scale/maxScale);float3 up=math.mul(parentData.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=parentData.Position+up*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{using Unity.Burst;using Unity.Collections;using Unity.Entities;using Unity.Jobs;using Unity.Mathematics;using Unity.Physics;using Unity.Physics.Extensions;using Unity.Transforms;using UnityEngine;[BurstCompile][UpdateInGroup(typeof(SimulationSystemGroup))]public partial class SCerevisiaeSystem:SystemBase{protected override void OnUpdate(){if(!GameStateManager.IsSetupComplete||GameStateManager.IsPaused)return;float deltaTime=GameStateManager.DeltaTime;EntityQuery query=GetEntityQuery(typeof(LocalTransform));int capacity=math.max(1024,query.CalculateEntityCount()*2);NativeParallelHashMap<Entity,ParentData> parentMap=new NativeParallelHashMap<Entity,ParentData>(capacity,Allocator.TempJob);var parentMapWriter=parentMap.AsParallelWriter();Dependency=Entities.ForEach((Entity e,in LocalTransform transform)=>{parentMapWriter.TryAdd(e,new ParentData{Position=transform.Position,Rotation=transform.Rotation,Scale=transform.Scale});}).ScheduleParallel(Dependency);EndSimulationEntityCommandBufferSystem ecbSystem=World.GetOrCreateSystemManaged<EndSimulationEntityCommandBufferSystem>();var ecb=ecbSystem.CreateCommandBuffer().AsParallelWriter();Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref SCerevisiaeComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 randomDir=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;SCerevisiaeComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.IsInitialCell=false;childData.Parent=entity;childData.GrowthDirection=randomDir;childTransform.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float ratio=math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f);float offset=(parentData.Scale*0.5f)*ratio;float3 worldDir=math.mul(parentData.Rotation,organism.GrowthDirection);transform.Position=parentData.Position+worldDir*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre e.coli, s.cerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado:\n - Si se piden ambas (e.coli y s.cerevisiae):\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.EColiComponent.cs\n   4.SCerevisiaeComponent.cs\n   5.EColiSystem.cs\n   6.SCerevisiaeSystem.cs\n - Si se pide solo e.coli:\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.EColiComponent.cs\n   4.EColiSystem.cs\n - Si se pide solo s.cerevisiae:\n   1.PrefabMaterialCreator.cs\n   2.CreatePrefabsOnClick.cs\n   3.SCerevisiaeComponent.cs\n   4.SCerevisiaeSystem.cs\n\nEl formato de cada script debe ser:\n\"1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}\" etc. Cualquier pregunta que no cumpla con las características anteriores será respondida con: \"ERROR FORMATO DE PREGUNTA.\". Y recuerda, responde tal cual como se te entrenó"}, {"role": "user", "content": "Una e.coli y una s.cerevisiae. La e.coli debe ser de color blanco, duplicarse cada 25 minutos y el hijo se separa del padre cuando alcanza el 75% del crecimiento. La scerevisiae debe ser de color negro, duplicarse cada 100 minutos y el hijo se separa del padre cuando alcanza el 65% del crecimiento."}, {"role": "assistant", "content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{private const string prefabFolder=\"Assets/Resources/Prefabs\";private const string materialFolder=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(prefabFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+prefabFolder);}if(!AssetDatabase.IsValidFolder(materialFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+materialFolder);}CreatePrefabAndMaterial(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5f,5f,5f),new Vector3(90f,0f,0f),ColliderType.Sphere);CreatePrefabAndMaterial(\"EColi\",PrimitiveType.Capsule,new Vector3(0.5f,2f,0.5f),new Vector3(90f,0f,0f),ColliderType.Capsule);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados exitosamente.\");}private enum ColliderType{Sphere,Capsule}private static void CreatePrefabAndMaterial(string name,PrimitiveType primitiveType,Vector3 scale,Vector3 rotation,ColliderType colliderType){GameObject obj=GameObject.CreatePrimitive(primitiveType);obj.name=name;obj.transform.rotation=Quaternion.Euler(rotation);obj.transform.localScale=scale;Collider existingCollider=obj.GetComponent<Collider>();if(existingCollider!=null)Object.DestroyImmediate(existingCollider);switch(colliderType){case ColliderType.Sphere:obj.AddComponent<SphereCollider>();break;case ColliderType.Capsule:obj.AddComponent<CapsuleCollider>();break;}Shader shader=Shader.Find(\"Universal Render Pipeline/Lit\");if(shader==null){Debug.LogError(\"Shader 'Universal Render Pipeline/Lit' no se encontró. Asegúrate de que URP esté instalado y configurado.\");return;}Material mat=new Material(shader);if(name==\"SCerevisiae\")mat.color = new Color(0f, 0f, 0f, 1f);else if(name==\"EColi\")mat.color = new Color(1f, 1f, 1f, 1f);else mat.color = new Color(1f, 1f, 1f, 1f);string matPath=Path.Combine(materialFolder,name+\".mat\");AssetDatabase.CreateAsset(mat,matPath);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Renderer renderer=obj.GetComponent<Renderer>();if(renderer!=null)renderer.sharedMaterial=mat;string prefabPath=Path.Combine(prefabFolder,name+\".prefab\");PrefabUtility.SaveAsPrefabAsset(obj,prefabPath);Object.DestroyImmediate(obj);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 position){if(currentPrefabIndex>=prefabs.Count)return;NativeArray<Entity>spawnerEntities=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=spawnerEntities.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");spawnerEntities.Dispose();return;}Entity spawner=spawnerEntities[currentPrefabIndex];spawnerEntities.Dispose();Entity prefabEntity=entityManager.GetComponentData<PrefabEntityComponent>(spawner).prefab;Entity entity=entityManager.Instantiate(prefabEntity);float originalScale=entityManager.GetComponentData<LocalTransform>(prefabEntity).Scale;quaternion originalRotation=entityManager.GetComponentData<LocalTransform>(prefabEntity).Rotation;float randYRot=UnityEngine.Random.Range(0f,360f);quaternion newRotation=math.mul(originalRotation,quaternion.RotateY(math.radians(randYRot)));float heightOffset=originalScale*0.5f;float3 adjustedPosition=new float3(position.x,math.max(position.y+heightOffset,heightOffset),position.z);entityManager.SetComponentData(entity,new LocalTransform{Position=adjustedPosition,Rotation=newRotation,Scale=originalScale});string prefabName=prefabs[currentPrefabIndex].name;switch(prefabName){case \"EColi\":entityManager.AddComponentData(entity,new EColiComponent{TimeReference=1500f,SeparationThreshold=0.75f,MaxScale=1.0f,GrowthTime=0f,GrowthDuration=1500f*0.75f,TimeSinceLastDivision=0f,DivisionInterval=1500f*0.75f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case \"SCerevisiae\":entityManager.AddComponentData(entity,new SCerevisiaeComponent{TimeReference=6000f,SeparationThreshold=0.65f,MaxScale=5.0f,GrowthTime=0f,GrowthDuration=6000f*0.65f,TimeSinceLastDivision=0f,DivisionInterval=6000f*0.65f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{prefabName}'\");break;}AddPhysicsComponents(entity,prefabName,originalScale);Debug.Log($\"Entidad '{prefabName}' creada en {adjustedPosition}\");}private void AddPhysicsComponents(Entity entity,string prefabName,float scale){BlobAssetReference<Unity.Physics.Collider>collider=default;Material mat=new Material{Friction=8f,Restitution=0f};switch(prefabName){case \"EColi\":collider=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-scale,0),Vertex1=new float3(0,scale,0),Radius=0.25f},CollisionFilter.Default,mat);break;case \"SCerevisiae\":collider=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=scale*0.1f},CollisionFilter.Default,mat);break;default:Debug.LogWarning($\"No collider para '{prefabName}'\");return;}entityManager.AddComponentData(entity,new PhysicsCollider{Value=collider});if(collider.IsCreated){var massProps=collider.Value.MassProperties;entityManager.AddComponentData(entity,PhysicsMass.CreateDynamic(massProps,1f));}entityManager.AddComponentData(entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(entity,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(entity,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{prefabName}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{using Unity.Burst;using Unity.Collections;using Unity.Entities;using Unity.Jobs;using Unity.Mathematics;using Unity.Physics;using Unity.Physics.Extensions;using Unity.Transforms;using UnityEngine;[BurstCompile][UpdateInGroup(typeof(SimulationSystemGroup))]public partial class EColiSystem:SystemBase{protected override void OnUpdate(){if(!GameStateManager.IsSetupComplete||GameStateManager.IsPaused)return;float deltaTime=GameStateManager.DeltaTime;EntityQuery query=GetEntityQuery(typeof(LocalTransform));int capacity=math.max(1024,query.CalculateEntityCount()*2);NativeParallelHashMap<Entity,ParentData> parentMap=new NativeParallelHashMap<Entity,ParentData>(capacity,Allocator.TempJob);var parentMapWriter=parentMap.AsParallelWriter();Dependency=Entities.ForEach((Entity e,in LocalTransform transform)=>{parentMapWriter.TryAdd(e,new ParentData{Position=transform.Position,Rotation=transform.Rotation,Scale=transform.Scale});}).ScheduleParallel(Dependency);EndSimulationEntityCommandBufferSystem ecbSystem=World.GetOrCreateSystemManaged<EndSimulationEntityCommandBufferSystem>();var ecb=ecbSystem.CreateCommandBuffer().AsParallelWriter();Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref EColiComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int sign=rng.NextFloat()<0.5f?1:-1;Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;EColiComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.HasGeneratedChild=false;childData.IsInitialCell=false;childData.Parent=entity;childData.SeparationSign=sign;float3 upDir=math.mul(transform.Rotation,new float3(0,sign,0));childTransform.Position=transform.Position+upDir*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float offset=math.lerp(0f,parentData.Scale*4.9f,transform.Scale/maxScale);float3 up=math.mul(parentData.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=parentData.Position+up*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{using Unity.Burst;using Unity.Collections;using Unity.Entities;using Unity.Jobs;using Unity.Mathematics;using Unity.Physics;using Unity.Physics.Extensions;using Unity.Transforms;using UnityEngine;[BurstCompile][UpdateInGroup(typeof(SimulationSystemGroup))]public partial class SCerevisiaeSystem:SystemBase{protected override void OnUpdate(){if(!GameStateManager.IsSetupComplete||GameStateManager.IsPaused)return;float deltaTime=GameStateManager.DeltaTime;EntityQuery query=GetEntityQuery(typeof(LocalTransform));int capacity=math.max(1024,query.CalculateEntityCount()*2);NativeParallelHashMap<Entity,ParentData> parentMap=new NativeParallelHashMap<Entity,ParentData>(capacity,Allocator.TempJob);var parentMapWriter=parentMap.AsParallelWriter();Dependency=Entities.ForEach((Entity e,in LocalTransform transform)=>{parentMapWriter.TryAdd(e,new ParentData{Position=transform.Position,Rotation=transform.Rotation,Scale=transform.Scale});}).ScheduleParallel(Dependency);EndSimulationEntityCommandBufferSystem ecbSystem=World.GetOrCreateSystemManaged<EndSimulationEntityCommandBufferSystem>();var ecb=ecbSystem.CreateCommandBuffer().AsParallelWriter();Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref SCerevisiaeComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 randomDir=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;SCerevisiaeComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.IsInitialCell=false;childData.Parent=entity;childData.GrowthDirection=randomDir;childTransform.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float ratio=math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f);float offset=(parentData.Scale*0.5f)*ratio;float3 worldDir=math.mul(parentData.Rotation,organism.GrowthDirection);transform.Position=parentData.Position+worldDir*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre e.coli, s.cerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (e.coli y s.cerevisiae): 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.SCerevisiaeComponent.cs{...}5.EColiSystem.cs{...}6.SCerevisiaeSystem.cs{...} - Si se pide solo e.coli: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.EColiSystem.cs{...} - Si se pide solo s.cerevisiae: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.SCerevisiaeComponent.cs{...}4.SCerevisiaeSystem.cs{...}"}, {"role": "user", "content": "Una e.coli y una s.cerevisiae. La e.coli debe ser de color azul oscuro, duplicarse cada 22 minutos y el hijo se separa del padre cuando alcanza el 68% del crecimiento. La scerevisiae debe ser de color rosa, duplicarse cada 55 minutos y el hijo se separa del padre cuando alcanza el 77% del crecimiento."}, {"role": "assistant", "content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{private const string prefabFolder=\"Assets/Resources/Prefabs\";private const string materialFolder=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(prefabFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+prefabFolder);}if(!AssetDatabase.IsValidFolder(materialFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+materialFolder);}CreatePrefabAndMaterial(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5f,5f,5f),new Vector3(90f,0f,0f),ColliderType.Sphere);CreatePrefabAndMaterial(\"EColi\",PrimitiveType.Capsule,new Vector3(0.5f,2f,0.5f),new Vector3(90f,0f,0f),ColliderType.Capsule);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados exitosamente.\");}private enum ColliderType{Sphere,Capsule}private static void CreatePrefabAndMaterial(string name,PrimitiveType primitiveType,Vector3 scale,Vector3 rotation,ColliderType colliderType){GameObject obj=GameObject.CreatePrimitive(primitiveType);obj.name=name;obj.transform.rotation=Quaternion.Euler(rotation);obj.transform.localScale=scale;Collider existingCollider=obj.GetComponent<Collider>();if(existingCollider!=null)Object.DestroyImmediate(existingCollider);switch(colliderType){case ColliderType.Sphere:obj.AddComponent<SphereCollider>();break;case ColliderType.Capsule:obj.AddComponent<CapsuleCollider>();break;}Shader shader=Shader.Find(\"Universal Render Pipeline/Lit\");if(shader==null){Debug.LogError(\"Shader 'Universal Render Pipeline/Lit' no se encontró. Asegúrate de que URP esté instalado y configurado.\");return;}Material mat=new Material(shader);if(name==\"SCerevisiae\")mat.color=new Color(1f,0.75f,0.8f);else if(name==\"EColi\")mat.color=new Color(0f,0f,0.5f);else mat.color = new Color(1f, 1f, 1f, 1f);string matPath=Path.Combine(materialFolder,name+\".mat\");AssetDatabase.CreateAsset(mat,matPath);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Renderer renderer=obj.GetComponent<Renderer>();if(renderer!=null)renderer.sharedMaterial=mat;string prefabPath=Path.Combine(prefabFolder,name+\".prefab\");PrefabUtility.SaveAsPrefabAsset(obj,prefabPath);Object.DestroyImmediate(obj);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 position){if(currentPrefabIndex>=prefabs.Count)return;NativeArray<Entity>spawnerEntities=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=spawnerEntities.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");spawnerEntities.Dispose();return;}Entity spawner=spawnerEntities[currentPrefabIndex];spawnerEntities.Dispose();Entity prefabEntity=entityManager.GetComponentData<PrefabEntityComponent>(spawner).prefab;Entity entity=entityManager.Instantiate(prefabEntity);float originalScale=entityManager.GetComponentData<LocalTransform>(prefabEntity).Scale;quaternion originalRotation=entityManager.GetComponentData<LocalTransform>(prefabEntity).Rotation;float randYRot=UnityEngine.Random.Range(0f,360f);quaternion newRotation=math.mul(originalRotation,quaternion.RotateY(math.radians(randYRot)));float heightOffset=originalScale*0.5f;float3 adjustedPosition=new float3(position.x,math.max(position.y+heightOffset,heightOffset),position.z);entityManager.SetComponentData(entity,new LocalTransform{Position=adjustedPosition,Rotation=newRotation,Scale=originalScale});string prefabName=prefabs[currentPrefabIndex].name;switch(prefabName){case \"EColi\":entityManager.AddComponentData(entity,new EColiComponent{TimeReference=1320f,SeparationThreshold=0.68f,MaxScale=1.0f,GrowthTime=0f,GrowthDuration=1320f*0.68f,TimeSinceLastDivision=0f,DivisionInterval=1320f*0.68f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case \"SCerevisiae\":entityManager.AddComponentData(entity,new SCerevisiaeComponent{TimeReference=3300f,SeparationThreshold=0.77f,MaxScale=5.0f,GrowthTime=0f,GrowthDuration=3300f*0.77f,TimeSinceLastDivision=0f,DivisionInterval=3300f*0.77f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{prefabName}'\");break;}AddPhysicsComponents(entity,prefabName,originalScale);Debug.Log($\"Entidad '{prefabName}' creada en {adjustedPosition}\");}private void AddPhysicsComponents(Entity entity,string prefabName,float scale){BlobAssetReference<Unity.Physics.Collider>collider=default;Material mat=new Material{Friction=8f,Restitution=0f};switch(prefabName){case \"EColi\":collider=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-scale,0),Vertex1=new float3(0,scale,0),Radius=0.25f},CollisionFilter.Default,mat);break;case \"SCerevisiae\":collider=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=scale*0.1f},CollisionFilter.Default,mat);break;default:Debug.LogWarning($\"No collider para '{prefabName}'\");return;}entityManager.AddComponentData(entity,new PhysicsCollider{Value=collider});if(collider.IsCreated){var massProps=collider.Value.MassProperties;entityManager.AddComponentData(entity,PhysicsMass.CreateDynamic(massProps,1f));}entityManager.AddComponentData(entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(entity,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(entity,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{prefabName}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref EColiComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int sign=rng.NextFloat()<0.5f?1:-1;Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;EColiComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.HasGeneratedChild=false;childData.IsInitialCell=false;childData.Parent=entity;childData.SeparationSign=sign;float3 upDir=math.mul(transform.Rotation,new float3(0,sign,0));childTransform.Position=transform.Position+upDir*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float offset=math.lerp(0f,parentData.Scale*4.9f,transform.Scale/maxScale);float3 up=math.mul(parentData.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=parentData.Position+up*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref SCerevisiaeComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 randomDir=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;SCerevisiaeComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.IsInitialCell=false;childData.Parent=entity;childData.GrowthDirection=randomDir;childTransform.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float ratio=math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f);float offset=(parentData.Scale*0.5f)*ratio;float3 worldDir=math.mul(parentData.Rotation,organism.GrowthDirection);transform.Position=parentData.Position+worldDir*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre e.coli, s.cerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (e.coli y s.cerevisiae): 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.SCerevisiaeComponent.cs{...}5.EColiSystem.cs{...}6.SCerevisiaeSystem.cs{...} - Si se pide solo e.coli: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.EColiSystem.cs{...} - Si se pide solo s.cerevisiae: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.SCerevisiaeComponent.cs{...}4.SCerevisiaeSystem.cs{...}"}, {"role": "user", "content": "Una e.coli y una s.cerevisiae. La e.coli debe ser de color cyan, duplicarse cada 16 minutos y el hijo se separa del padre cuando alcanza el 60% del crecimiento. La scerevisiae debe ser de color azul, duplicarse cada 90 minutos y el hijo se separa del padre cuando alcanza el 85% del crecimiento."}, {"role": "assistant", "content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{private const string prefabFolder=\"Assets/Resources/Prefabs\";private const string materialFolder=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(prefabFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+prefabFolder);}if(!AssetDatabase.IsValidFolder(materialFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+materialFolder);}CreatePrefabAndMaterial(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5f,5f,5f),new Vector3(90f,0f,0f),ColliderType.Sphere);CreatePrefabAndMaterial(\"EColi\",PrimitiveType.Capsule,new Vector3(0.5f,2f,0.5f),new Vector3(90f,0f,0f),ColliderType.Capsule);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados exitosamente.\");}private enum ColliderType{Sphere,Capsule}private static void CreatePrefabAndMaterial(string name,PrimitiveType primitiveType,Vector3 scale,Vector3 rotation,ColliderType colliderType){GameObject obj=GameObject.CreatePrimitive(primitiveType);obj.name=name;obj.transform.rotation=Quaternion.Euler(rotation);obj.transform.localScale=scale;Collider existingCollider=obj.GetComponent<Collider>();if(existingCollider!=null)Object.DestroyImmediate(existingCollider);switch(colliderType){case ColliderType.Sphere:obj.AddComponent<SphereCollider>();break;case ColliderType.Capsule:obj.AddComponent<CapsuleCollider>();break;}Shader shader=Shader.Find(\"Universal Render Pipeline/Lit\");if(shader==null){Debug.LogError(\"Shader 'Universal Render Pipeline/Lit' no se encontró. Asegúrate de que URP esté instalado y configurado.\");return;}Material mat=new Material(shader);if(name==\"SCerevisiae\")mat.color = new Color(0f, 0f, 1f, 1f);else if(name==\"EColi\")mat.color = new Color(0f, 1f, 1f, 1f);else mat.color = new Color(1f, 1f, 1f, 1f);string matPath=Path.Combine(materialFolder,name+\".mat\");AssetDatabase.CreateAsset(mat,matPath);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Renderer renderer=obj.GetComponent<Renderer>();if(renderer!=null)renderer.sharedMaterial=mat;string prefabPath=Path.Combine(prefabFolder,name+\".prefab\");PrefabUtility.SaveAsPrefabAsset(obj,prefabPath);Object.DestroyImmediate(obj);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 position){if(currentPrefabIndex>=prefabs.Count)return;NativeArray<Entity>spawnerEntities=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=spawnerEntities.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");spawnerEntities.Dispose();return;}Entity spawner=spawnerEntities[currentPrefabIndex];spawnerEntities.Dispose();Entity prefabEntity=entityManager.GetComponentData<PrefabEntityComponent>(spawner).prefab;Entity entity=entityManager.Instantiate(prefabEntity);float originalScale=entityManager.GetComponentData<LocalTransform>(prefabEntity).Scale;quaternion originalRotation=entityManager.GetComponentData<LocalTransform>(prefabEntity).Rotation;float randYRot=UnityEngine.Random.Range(0f,360f);quaternion newRotation=math.mul(originalRotation,quaternion.RotateY(math.radians(randYRot)));float heightOffset=originalScale*0.5f;float3 adjustedPosition=new float3(position.x,math.max(position.y+heightOffset,heightOffset),position.z);entityManager.SetComponentData(entity,new LocalTransform{Position=adjustedPosition,Rotation=newRotation,Scale=originalScale});string prefabName=prefabs[currentPrefabIndex].name;switch(prefabName){case \"EColi\":entityManager.AddComponentData(entity,new EColiComponent{TimeReference=960f,SeparationThreshold=0.60f,MaxScale=1.0f,GrowthTime=0f,GrowthDuration=960f*0.60f,TimeSinceLastDivision=0f,DivisionInterval=960f*0.60f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case \"SCerevisiae\":entityManager.AddComponentData(entity,new SCerevisiaeComponent{TimeReference=5400f,SeparationThreshold=0.85f,MaxScale=5.0f,GrowthTime=0f,GrowthDuration=5400f*0.85f,TimeSinceLastDivision=0f,DivisionInterval=5400f*0.85f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{prefabName}'\");break;}AddPhysicsComponents(entity,prefabName,originalScale);Debug.Log($\"Entidad '{prefabName}' creada en {adjustedPosition}\");}private void AddPhysicsComponents(Entity entity,string prefabName,float scale){BlobAssetReference<Unity.Physics.Collider>collider=default;Material mat=new Material{Friction=8f,Restitution=0f};switch(prefabName){case \"EColi\":collider=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-scale,0),Vertex1=new float3(0,scale,0),Radius=0.25f},CollisionFilter.Default,mat);break;case \"SCerevisiae\":collider=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=scale*0.1f},CollisionFilter.Default,mat);break;default:Debug.LogWarning($\"No collider para '{prefabName}'\");return;}entityManager.AddComponentData(entity,new PhysicsCollider{Value=collider});if(collider.IsCreated){var massProps=collider.Value.MassProperties;entityManager.AddComponentData(entity,PhysicsMass.CreateDynamic(massProps,1f));}entityManager.AddComponentData(entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(entity,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(entity,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{prefabName}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref EColiComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int sign=rng.NextFloat()<0.5f?1:-1;Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;EColiComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.HasGeneratedChild=false;childData.IsInitialCell=false;childData.Parent=entity;childData.SeparationSign=sign;float3 upDir=math.mul(transform.Rotation,new float3(0,sign,0));childTransform.Position=transform.Position+upDir*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float offset=math.lerp(0f,parentData.Scale*4.9f,transform.Scale/maxScale);float3 up=math.mul(parentData.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=parentData.Position+up*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref SCerevisiaeComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 randomDir=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;SCerevisiaeComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.IsInitialCell=false;childData.Parent=entity;childData.GrowthDirection=randomDir;childTransform.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float ratio=math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f);float offset=(parentData.Scale*0.5f)*ratio;float3 worldDir=math.mul(parentData.Rotation,organism.GrowthDirection);transform.Position=parentData.Position+worldDir*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre e.coli, s.cerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (e.coli y s.cerevisiae): 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.SCerevisiaeComponent.cs{...}5.EColiSystem.cs{...}6.SCerevisiaeSystem.cs{...} - Si se pide solo e.coli: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.EColiSystem.cs{...} - Si se pide solo s.cerevisiae: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.SCerevisiaeComponent.cs{...}4.SCerevisiaeSystem.cs{...}"}, {"role": "user", "content": "Una e.coli y una s.cerevisiae. La e.coli debe ser de color cyan, duplicarse cada 16 minutos y el hijo se separa del padre cuando alcanza el 60% del crecimiento. La scerevisiae debe ser de color azul, duplicarse cada 90 minutos y el hijo se separa del padre cuando alcanza el 85% del crecimiento."}, {"role": "assistant", "content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{private const string prefabFolder=\"Assets/Resources/Prefabs\";private const string materialFolder=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(prefabFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+prefabFolder);}if(!AssetDatabase.IsValidFolder(materialFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+materialFolder);}CreatePrefabAndMaterial(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5f,5f,5f),new Vector3(90f,0f,0f),ColliderType.Sphere);CreatePrefabAndMaterial(\"EColi\",PrimitiveType.Capsule,new Vector3(0.5f,2f,0.5f),new Vector3(90f,0f,0f),ColliderType.Capsule);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados exitosamente.\");}private enum ColliderType{Sphere,Capsule}private static void CreatePrefabAndMaterial(string name,PrimitiveType primitiveType,Vector3 scale,Vector3 rotation,ColliderType colliderType){GameObject obj=GameObject.CreatePrimitive(primitiveType);obj.name=name;obj.transform.rotation=Quaternion.Euler(rotation);obj.transform.localScale=scale;Collider existingCollider=obj.GetComponent<Collider>();if(existingCollider!=null)Object.DestroyImmediate(existingCollider);switch(colliderType){case ColliderType.Sphere:obj.AddComponent<SphereCollider>();break;case ColliderType.Capsule:obj.AddComponent<CapsuleCollider>();break;}Shader shader=Shader.Find(\"Universal Render Pipeline/Lit\");if(shader==null){Debug.LogError(\"Shader 'Universal Render Pipeline/Lit' no se encontró. Asegúrate de que URP esté instalado y configurado.\");return;}Material mat=new Material(shader);if(name==\"SCerevisiae\")mat.color = new Color(0f, 0f, 1f, 1f);else if(name==\"EColi\")mat.color = new Color(0f, 1f, 1f, 1f);else mat.color = new Color(1f, 1f, 1f, 1f);string matPath=Path.Combine(materialFolder,name+\".mat\");AssetDatabase.CreateAsset(mat,matPath);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Renderer renderer=obj.GetComponent<Renderer>();if(renderer!=null)renderer.sharedMaterial=mat;string prefabPath=Path.Combine(prefabFolder,name+\".prefab\");PrefabUtility.SaveAsPrefabAsset(obj,prefabPath);Object.DestroyImmediate(obj);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 position){if(currentPrefabIndex>=prefabs.Count)return;NativeArray<Entity>spawnerEntities=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=spawnerEntities.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");spawnerEntities.Dispose();return;}Entity spawner=spawnerEntities[currentPrefabIndex];spawnerEntities.Dispose();Entity prefabEntity=entityManager.GetComponentData<PrefabEntityComponent>(spawner).prefab;Entity entity=entityManager.Instantiate(prefabEntity);float originalScale=entityManager.GetComponentData<LocalTransform>(prefabEntity).Scale;quaternion originalRotation=entityManager.GetComponentData<LocalTransform>(prefabEntity).Rotation;float randYRot=UnityEngine.Random.Range(0f,360f);quaternion newRotation=math.mul(originalRotation,quaternion.RotateY(math.radians(randYRot)));float heightOffset=originalScale*0.5f;float3 adjustedPosition=new float3(position.x,math.max(position.y+heightOffset,heightOffset),position.z);entityManager.SetComponentData(entity,new LocalTransform{Position=adjustedPosition,Rotation=newRotation,Scale=originalScale});string prefabName=prefabs[currentPrefabIndex].name;switch(prefabName){case \"EColi\":entityManager.AddComponentData(entity,new EColiComponent{TimeReference=960f,SeparationThreshold=0.60f,MaxScale=1.0f,GrowthTime=0f,GrowthDuration=960f*0.60f,TimeSinceLastDivision=0f,DivisionInterval=960f*0.60f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case \"SCerevisiae\":entityManager.AddComponentData(entity,new SCerevisiaeComponent{TimeReference=5400f,SeparationThreshold=0.85f,MaxScale=5.0f,GrowthTime=0f,GrowthDuration=5400f*0.85f,TimeSinceLastDivision=0f,DivisionInterval=5400f*0.85f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{prefabName}'\");break;}AddPhysicsComponents(entity,prefabName,originalScale);Debug.Log($\"Entidad '{prefabName}' creada en {adjustedPosition}\");}private void AddPhysicsComponents(Entity entity,string prefabName,float scale){BlobAssetReference<Unity.Physics.Collider>collider=default;Material mat=new Material{Friction=8f,Restitution=0f};switch(prefabName){case \"EColi\":collider=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-scale,0),Vertex1=new float3(0,scale,0),Radius=0.25f},CollisionFilter.Default,mat);break;case \"SCerevisiae\":collider=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=scale*0.1f},CollisionFilter.Default,mat);break;default:Debug.LogWarning($\"No collider para '{prefabName}'\");return;}entityManager.AddComponentData(entity,new PhysicsCollider{Value=collider});if(collider.IsCreated){var massProps=collider.Value.MassProperties;entityManager.AddComponentData(entity,PhysicsMass.CreateDynamic(massProps,1f));}entityManager.AddComponentData(entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(entity,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(entity,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{prefabName}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref EColiComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int sign=rng.NextFloat()<0.5f?1:-1;Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;EColiComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.HasGeneratedChild=false;childData.IsInitialCell=false;childData.Parent=entity;childData.SeparationSign=sign;float3 upDir=math.mul(transform.Rotation,new float3(0,sign,0));childTransform.Position=transform.Position+upDir*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float offset=math.lerp(0f,parentData.Scale*4.9f,transform.Scale/maxScale);float3 up=math.mul(parentData.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=parentData.Position+up*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref SCerevisiaeComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 randomDir=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;SCerevisiaeComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.IsInitialCell=false;childData.Parent=entity;childData.GrowthDirection=randomDir;childTransform.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float ratio=math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f);float offset=(parentData.Scale*0.5f)*ratio;float3 worldDir=math.mul(parentData.Rotation,organism.GrowthDirection);transform.Position=parentData.Position+worldDir*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre e.coli, s.cerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (e.coli y s.cerevisiae): 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.SCerevisiaeComponent.cs{...}5.EColiSystem.cs{...}6.SCerevisiaeSystem.cs{...} - Si se pide solo e.coli: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.EColiSystem.cs{...} - Si se pide solo s.cerevisiae: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.SCerevisiaeComponent.cs{...}4.SCerevisiaeSystem.cs{...}"}, {"role": "user", "content": "Una e.coli y una s.cerevisiae. La e.coli debe ser de color gris, duplicarse cada 14 minutos y el hijo se separa del padre cuando alcanza el 50% del crecimiento. La scerevisiae debe ser de color rosa oscuro, duplicarse cada 65 minutos y el hijo se separa del padre cuando alcanza el 95% del crecimiento."}, {"role": "assistant", "content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{private const string prefabFolder=\"Assets/Resources/Prefabs\";private const string materialFolder=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(prefabFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+prefabFolder);}if(!AssetDatabase.IsValidFolder(materialFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+materialFolder);}CreatePrefabAndMaterial(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5f,5f,5f),new Vector3(90f,0f,0f),ColliderType.Sphere);CreatePrefabAndMaterial(\"EColi\",PrimitiveType.Capsule,new Vector3(0.5f,2f,0.5f),new Vector3(90f,0f,0f),ColliderType.Capsule);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados exitosamente.\");}private enum ColliderType{Sphere,Capsule}private static void CreatePrefabAndMaterial(string name,PrimitiveType primitiveType,Vector3 scale,Vector3 rotation,ColliderType colliderType){GameObject obj=GameObject.CreatePrimitive(primitiveType);obj.name=name;obj.transform.rotation=Quaternion.Euler(rotation);obj.transform.localScale=scale;Collider existingCollider=obj.GetComponent<Collider>();if(existingCollider!=null)Object.DestroyImmediate(existingCollider);switch(colliderType){case ColliderType.Sphere:obj.AddComponent<SphereCollider>();break;case ColliderType.Capsule:obj.AddComponent<CapsuleCollider>();break;}Shader shader=Shader.Find(\"Universal Render Pipeline/Lit\");if(shader==null){Debug.LogError(\"Shader 'Universal Render Pipeline/Lit' no se encontró. Asegúrate de que URP esté instalado y configurado.\");return;}Material mat=new Material(shader);if(name==\"SCerevisiae\")mat.color=new Color(0.8f,0.2f,0.6f);else if(name==\"EColi\")mat.color = new Color(0.5f, 0.5f, 0.5f, 1f);else mat.color = new Color(1f, 1f, 1f, 1f);string matPath=Path.Combine(materialFolder,name+\".mat\");AssetDatabase.CreateAsset(mat,matPath);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Renderer renderer=obj.GetComponent<Renderer>();if(renderer!=null)renderer.sharedMaterial=mat;string prefabPath=Path.Combine(prefabFolder,name+\".prefab\");PrefabUtility.SaveAsPrefabAsset(obj,prefabPath);Object.DestroyImmediate(obj);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 position){if(currentPrefabIndex>=prefabs.Count)return;NativeArray<Entity>spawnerEntities=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=spawnerEntities.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");spawnerEntities.Dispose();return;}Entity spawner=spawnerEntities[currentPrefabIndex];spawnerEntities.Dispose();Entity prefabEntity=entityManager.GetComponentData<PrefabEntityComponent>(spawner).prefab;Entity entity=entityManager.Instantiate(prefabEntity);float originalScale=entityManager.GetComponentData<LocalTransform>(prefabEntity).Scale;quaternion originalRotation=entityManager.GetComponentData<LocalTransform>(prefabEntity).Rotation;float randYRot=UnityEngine.Random.Range(0f,360f);quaternion newRotation=math.mul(originalRotation,quaternion.RotateY(math.radians(randYRot)));float heightOffset=originalScale*0.5f;float3 adjustedPosition=new float3(position.x,math.max(position.y+heightOffset,heightOffset),position.z);entityManager.SetComponentData(entity,new LocalTransform{Position=adjustedPosition,Rotation=newRotation,Scale=originalScale});string prefabName=prefabs[currentPrefabIndex].name;switch(prefabName){case \"EColi\":entityManager.AddComponentData(entity,new EColiComponent{TimeReference=840f,SeparationThreshold=0.50f,MaxScale=1.0f,GrowthTime=0f,GrowthDuration=840f*0.50f,TimeSinceLastDivision=0f,DivisionInterval=840f*0.50f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case \"SCerevisiae\":entityManager.AddComponentData(entity,new SCerevisiaeComponent{TimeReference=3900f,SeparationThreshold=0.95f,MaxScale=5.0f,GrowthTime=0f,GrowthDuration=3900f*0.95f,TimeSinceLastDivision=0f,DivisionInterval=3900f*0.95f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{prefabName}'\");break;}AddPhysicsComponents(entity,prefabName,originalScale);Debug.Log($\"Entidad '{prefabName}' creada en {adjustedPosition}\");}private void AddPhysicsComponents(Entity entity,string prefabName,float scale){BlobAssetReference<Unity.Physics.Collider>collider=default;Material mat=new Material{Friction=8f,Restitution=0f};switch(prefabName){case \"EColi\":collider=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-scale,0),Vertex1=new float3(0,scale,0),Radius=0.25f},CollisionFilter.Default,mat);break;case \"SCerevisiae\":collider=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=scale*0.1f},CollisionFilter.Default,mat);break;default:Debug.LogWarning($\"No collider para '{prefabName}'\");return;}entityManager.AddComponentData(entity,new PhysicsCollider{Value=collider});if(collider.IsCreated){var massProps=collider.Value.MassProperties;entityManager.AddComponentData(entity,PhysicsMass.CreateDynamic(massProps,1f));}entityManager.AddComponentData(entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(entity,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(entity,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{prefabName}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref EColiComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int sign=rng.NextFloat()<0.5f?1:-1;Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;EColiComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.HasGeneratedChild=false;childData.IsInitialCell=false;childData.Parent=entity;childData.SeparationSign=sign;float3 upDir=math.mul(transform.Rotation,new float3(0,sign,0));childTransform.Position=transform.Position+upDir*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float offset=math.lerp(0f,parentData.Scale*4.9f,transform.Scale/maxScale);float3 up=math.mul(parentData.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=parentData.Position+up*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref SCerevisiaeComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 randomDir=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;SCerevisiaeComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.IsInitialCell=false;childData.Parent=entity;childData.GrowthDirection=randomDir;childTransform.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){{if(transform.Scale<organism.SeparationThreshold*maxScale){float ratio=math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f);float offset=(parentData.Scale*0.5f)*ratio;float3 worldDir=math.mul(parentData.Rotation,organism.GrowthDirection);transform.Position=parentData.Position+worldDir*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre e.coli, s.cerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (e.coli y s.cerevisiae): 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.SCerevisiaeComponent.cs{...}5.EColiSystem.cs{...}6.SCerevisiaeSystem.cs{...} - Si se pide solo e.coli: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.EColiSystem.cs{...} - Si se pide solo s.cerevisiae: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.SCerevisiaeComponent.cs{...}4.SCerevisiaeSystem.cs{...}"}, {"role": "user", "content": "Una e.coli y una s.cerevisiae. La e.coli debe ser de color marrón, duplicarse cada 19 minutos y el hijo se separa del padre cuando alcanza el 72% del crecimiento. La scerevisiae debe ser de color verde esmeralda, duplicarse cada 70 minutos y el hijo se separa del padre cuando alcanza el 78% del crecimiento."}, {"role": "assistant", "content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{private const string prefabFolder=\"Assets/Resources/Prefabs\";private const string materialFolder=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(prefabFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+prefabFolder);}if(!AssetDatabase.IsValidFolder(materialFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+materialFolder);}CreatePrefabAndMaterial(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5f,5f,5f),new Vector3(90f,0f,0f),ColliderType.Sphere);CreatePrefabAndMaterial(\"EColi\",PrimitiveType.Capsule,new Vector3(0.5f,2f,0.5f),new Vector3(90f,0f,0f),ColliderType.Capsule);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados exitosamente.\");}private enum ColliderType{Sphere,Capsule}private static void CreatePrefabAndMaterial(string name,PrimitiveType primitiveType,Vector3 scale,Vector3 rotation,ColliderType colliderType){GameObject obj=GameObject.CreatePrimitive(primitiveType);obj.name=name;obj.transform.rotation=Quaternion.Euler(rotation);obj.transform.localScale=scale;Collider existingCollider=obj.GetComponent<Collider>();if(existingCollider!=null)Object.DestroyImmediate(existingCollider);switch(colliderType){case ColliderType.Sphere:obj.AddComponent<SphereCollider>();break;case ColliderType.Capsule:obj.AddComponent<CapsuleCollider>();break;}Shader shader=Shader.Find(\"Universal Render Pipeline/Lit\");if(shader==null){Debug.LogError(\"Shader 'Universal Render Pipeline/Lit' no se encontró. Asegúrate de que URP esté instalado y configurado.\");return;}Material mat=new Material(shader);if(name==\"SCerevisiae\")mat.color=new Color(0f,1f,0.5f);else if(name==\"EColi\")mat.color=new Color(0.6f,0.4f,0.2f);else mat.color = new Color(1f, 1f, 1f, 1f);string matPath=Path.Combine(materialFolder,name+\".mat\");AssetDatabase.CreateAsset(mat,matPath);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Renderer renderer=obj.GetComponent<Renderer>();if(renderer!=null)renderer.sharedMaterial=mat;string prefabPath=Path.Combine(prefabFolder,name+\".prefab\");PrefabUtility.SaveAsPrefabAsset(obj,prefabPath);Object.DestroyImmediate(obj);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 position){if(currentPrefabIndex>=prefabs.Count)return;NativeArray<Entity> spawnerEntities=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=spawnerEntities.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");spawnerEntities.Dispose();return;}Entity spawner=spawnerEntities[currentPrefabIndex];spawnerEntities.Dispose();Entity prefabEntity=entityManager.GetComponentData<PrefabEntityComponent>(spawner).prefab;Entity entity=entityManager.Instantiate(prefabEntity);float originalScale=entityManager.GetComponentData<LocalTransform>(prefabEntity).Scale;quaternion originalRotation=entityManager.GetComponentData<LocalTransform>(prefabEntity).Rotation;float randYRot=UnityEngine.Random.Range(0f,360f);quaternion newRotation=math.mul(originalRotation,quaternion.RotateY(math.radians(randYRot)));float heightOffset=originalScale*0.5f;float3 adjustedPosition=new float3(position.x,math.max(position.y+heightOffset,heightOffset),position.z);entityManager.SetComponentData(entity,new LocalTransform{Position=adjustedPosition,Rotation=newRotation,Scale=originalScale});string prefabName=prefabs[currentPrefabIndex].name;switch(prefabName){case \"EColi\":entityManager.AddComponentData(entity,new EColiComponent{TimeReference=1140f,SeparationThreshold=0.72f,MaxScale=1.0f,GrowthTime=0f,GrowthDuration=1140f*0.72f,TimeSinceLastDivision=0f,DivisionInterval=1140f*0.72f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case \"SCerevisiae\":entityManager.AddComponentData(entity,new SCerevisiaeComponent{TimeReference=4200f,SeparationThreshold=0.78f,MaxScale=5.0f,GrowthTime=0f,GrowthDuration=4200f*0.78f,TimeSinceLastDivision=0f,DivisionInterval=4200f*0.78f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{prefabName}'\");break;}AddPhysicsComponents(entity,prefabName,originalScale);Debug.Log($\"Entidad '{prefabName}' creada en {adjustedPosition}\");}private void AddPhysicsComponents(Entity entity,string prefabName,float scale){BlobAssetReference<Unity.Physics.Collider> collider=default;Material mat=new Material{Friction=8f,Restitution=0f};switch(prefabName){case \"EColi\":collider=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-scale,0),Vertex1=new float3(0,scale,0),Radius=0.25f},CollisionFilter.Default,mat);break;case \"SCerevisiae\":collider=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=scale*0.1f},CollisionFilter.Default,mat);break;default:Debug.LogWarning($\"No collider para '{prefabName}'\");return;}entityManager.AddComponentData(entity,new PhysicsCollider{Value=collider});if(collider.IsCreated){var massProps=collider.Value.MassProperties;entityManager.AddComponentData(entity,PhysicsMass.CreateDynamic(massProps,1f));}entityManager.AddComponentData(entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(entity,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(entity,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{prefabName}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{using Unity.Burst;using Unity.Collections;using Unity.Entities;using Unity.Jobs;using Unity.Mathematics;using Unity.Physics;using Unity.Physics.Extensions;using Unity.Transforms;using UnityEngine;[BurstCompile][UpdateInGroup(typeof(SimulationSystemGroup))]public partial class EColiSystem:SystemBase{protected override void OnUpdate(){if(!GameStateManager.IsSetupComplete||GameStateManager.IsPaused)return;float deltaTime=GameStateManager.DeltaTime;EntityQuery query=GetEntityQuery(typeof(LocalTransform));int capacity=math.max(1024,query.CalculateEntityCount()*2);NativeParallelHashMap<Entity,ParentData> parentMap=new NativeParallelHashMap<Entity,ParentData>(capacity,Allocator.TempJob);var parentMapWriter=parentMap.AsParallelWriter();Dependency=Entities.ForEach((Entity e,in LocalTransform transform)=>{parentMapWriter.TryAdd(e,new ParentData{Position=transform.Position,Rotation=transform.Rotation,Scale=transform.Scale});}).ScheduleParallel(Dependency);EndSimulationEntityCommandBufferSystem ecbSystem=World.GetOrCreateSystemManaged<EndSimulationEntityCommandBufferSystem>();var ecb=ecbSystem.CreateCommandBuffer().AsParallelWriter();Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref EColiComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int sign=rng.NextFloat()<0.5f?1:-1;Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;EColiComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.HasGeneratedChild=false;childData.IsInitialCell=false;childData.Parent=entity;childData.SeparationSign=sign;float3 upDir=math.mul(transform.Rotation,new float3(0,sign,0));childTransform.Position=transform.Position+upDir*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float offset=math.lerp(0f,parentData.Scale*4.9f,transform.Scale/maxScale);float3 up=math.mul(parentData.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=parentData.Position+up*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{using Unity.Burst;using Unity.Collections;using Unity.Entities;using Unity.Jobs;using Unity.Mathematics;using Unity.Physics;using Unity.Physics.Extensions;using Unity.Transforms;using UnityEngine;[BurstCompile][UpdateInGroup(typeof(SimulationSystemGroup))]public partial class SCerevisiaeSystem:SystemBase{protected override void OnUpdate(){if(!GameStateManager.IsSetupComplete||GameStateManager.IsPaused)return;float deltaTime=GameStateManager.DeltaTime;EntityQuery query=GetEntityQuery(typeof(LocalTransform));int capacity=math.max(1024,query.CalculateEntityCount()*2);NativeParallelHashMap<Entity,ParentData> parentMap=new NativeParallelHashMap<Entity,ParentData>(capacity,Allocator.TempJob);var parentMapWriter=parentMap.AsParallelWriter();Dependency=Entities.ForEach((Entity e,in LocalTransform transform)=>{parentMapWriter.TryAdd(e,new ParentData{Position=transform.Position,Rotation=transform.Rotation,Scale=transform.Scale});}).ScheduleParallel(Dependency);EndSimulationEntityCommandBufferSystem ecbSystem=World.GetOrCreateSystemManaged<EndSimulationEntityCommandBufferSystem>();var ecb=ecbSystem.CreateCommandBuffer().AsParallelWriter();Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref SCerevisiaeComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 randomDir=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;SCerevisiaeComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.IsInitialCell=false;childData.Parent=entity;childData.GrowthDirection=randomDir;childTransform.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float ratio=math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f);float offset=(parentData.Scale*0.5f)*ratio;float3 worldDir=math.mul(parentData.Rotation,organism.GrowthDirection);transform.Position=parentData.Position+worldDir*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}"}]}
{"messages": [{"role": "system", "content": "Eres un modelo especializado en generar código C# para simulaciones de Unity. Considera que los tiempos son en segundos; además, los colores en Unity se expresan en valores RGB divididos en 255. Debes contestar tal cual como se te fue entrenado, sin agregar nada más de lo que se espera en C#. No puedes responder en ningún otro lenguaje de programación ni añadir comentarios o palabras innecesarias. Solo puedes responder a consultas relacionadas con simulaciones en Unity sobre e.coli, s.cerevisiae o ambas, donde se indiquen: - El color de la(s) célula(s). - El tiempo de duplicación en minutos. - El porcentaje de crecimiento para separarse del padre. Tu respuesta debe incluir estrictamente estos scripts en el orden especificado: - Si se piden ambas (e.coli y s.cerevisiae): 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.SCerevisiaeComponent.cs{...}5.EColiSystem.cs{...}6.SCerevisiaeSystem.cs{...} - Si se pide solo e.coli: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.EColiComponent.cs{...}4.EColiSystem.cs{...} - Si se pide solo s.cerevisiae: 1.PrefabMaterialCreator.cs{...}2.CreatePrefabsOnClick.cs{...}3.SCerevisiaeComponent.cs{...}4.SCerevisiaeSystem.cs{...}"}, {"role": "user", "content": "Una e.coli y una s.cerevisiae. La e.coli debe ser de color cyan, duplicarse cada 16 minutos y el hijo se separa del padre cuando alcanza el 60% del crecimiento. La scerevisiae debe ser de color naranja, duplicarse cada 90 minutos y el hijo se separa del padre cuando alcanza el 85% del crecimiento."}, {"role": "assistant", "content": "1.PrefabMaterialCreator.cs{public static class PrefabMaterialCreator{private const string prefabFolder=\"Assets/Resources/Prefabs\";private const string materialFolder=\"Assets/Resources/PrefabsMaterials\";[MenuItem(\"Tools/Crear Prefabs y Materiales\")]public static void CreatePrefabsAndMaterials(){if(!AssetDatabase.IsValidFolder(prefabFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"Prefabs\");Debug.Log(\"Carpeta creada: \"+prefabFolder);}if(!AssetDatabase.IsValidFolder(materialFolder)){AssetDatabase.CreateFolder(\"Assets/Resources\",\"PrefabsMaterials\");Debug.Log(\"Carpeta creada: \"+materialFolder);}CreatePrefabAndMaterial(\"SCerevisiae\",PrimitiveType.Sphere,new Vector3(5f,5f,5f),new Vector3(90f,0f,0f),ColliderType.Sphere);CreatePrefabAndMaterial(\"EColi\",PrimitiveType.Capsule,new Vector3(0.5f,2f,0.5f),new Vector3(90f,0f,0f),ColliderType.Capsule);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Debug.Log(\"Prefabs y materiales creados exitosamente.\");}private enum ColliderType{Sphere,Capsule}private static void CreatePrefabAndMaterial(string name,PrimitiveType primitiveType,Vector3 scale,Vector3 rotation,ColliderType colliderType){GameObject obj=GameObject.CreatePrimitive(primitiveType);obj.name=name;obj.transform.rotation=Quaternion.Euler(rotation);obj.transform.localScale=scale;Collider existingCollider=obj.GetComponent<Collider>();if(existingCollider!=null)Object.DestroyImmediate(existingCollider);switch(colliderType){case ColliderType.Sphere:obj.AddComponent<SphereCollider>();break;case ColliderType.Capsule:obj.AddComponent<CapsuleCollider>();break;}Shader shader=Shader.Find(\"Universal Render Pipeline/Lit\");if(shader==null){Debug.LogError(\"Shader 'Universal Render Pipeline/Lit' no se encontró. Asegúrate de que URP esté instalado y configurado.\");return;}Material mat=new Material(shader);if(name==\"SCerevisiae\")mat.color = new Color(1f, 0.5f, 0f, 1f);else if(name==\"EColi\")mat.color = new Color(0f, 1f, 1f, 1f);else mat.color = new Color(1f, 1f, 1f, 1f);string matPath=Path.Combine(materialFolder,name+\".mat\");AssetDatabase.CreateAsset(mat,matPath);AssetDatabase.SaveAssets();AssetDatabase.Refresh();Renderer renderer=obj.GetComponent<Renderer>();if(renderer!=null)renderer.sharedMaterial=mat;string prefabPath=Path.Combine(prefabFolder,name+\".prefab\");PrefabUtility.SaveAsPrefabAsset(obj,prefabPath);Object.DestroyImmediate(obj);}}}2.CreatePrefabsOnClick.cs{private void CrearEntidad(Vector3 position){if(currentPrefabIndex>=prefabs.Count)return;NativeArray<Entity> spawnerEntities=spawnerQuery.ToEntityArray(Allocator.Temp);if(currentPrefabIndex>=spawnerEntities.Length){Debug.LogError($\"No se encontró spawner en índice {currentPrefabIndex}\");spawnerEntities.Dispose();return;}Entity spawner=spawnerEntities[currentPrefabIndex];spawnerEntities.Dispose();Entity prefabEntity=entityManager.GetComponentData<PrefabEntityComponent>(spawner).prefab;Entity entity=entityManager.Instantiate(prefabEntity);float originalScale=entityManager.GetComponentData<LocalTransform>(prefabEntity).Scale;quaternion originalRotation=entityManager.GetComponentData<LocalTransform>(prefabEntity).Rotation;float randYRot=UnityEngine.Random.Range(0f,360f);quaternion newRotation=math.mul(originalRotation,quaternion.RotateY(math.radians(randYRot)));float heightOffset=originalScale*0.5f;float3 adjustedPosition=new float3(position.x,math.max(position.y+heightOffset,heightOffset),position.z);entityManager.SetComponentData(entity,new LocalTransform{Position=adjustedPosition,Rotation=newRotation,Scale=originalScale});string prefabName=prefabs[currentPrefabIndex].name;switch(prefabName){case \"EColi\":entityManager.AddComponentData(entity,new EColiComponent{TimeReference=960f,SeparationThreshold=0.60f,MaxScale=1.0f,GrowthTime=0f,GrowthDuration=960f*0.60f,TimeSinceLastDivision=0f,DivisionInterval=960f*0.60f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;case \"SCerevisiae\":entityManager.AddComponentData(entity,new SCerevisiaeComponent{TimeReference=5400f,SeparationThreshold=0.85f,MaxScale=5.0f,GrowthTime=0f,GrowthDuration=5400f*0.85f,TimeSinceLastDivision=0f,DivisionInterval=5400f*0.85f,HasGeneratedChild=false,Parent=Entity.Null,IsInitialCell=true,SeparationSign=0});break;default:Debug.LogWarning($\"No hay componente ECS para '{prefabName}'\");break;}AddPhysicsComponents(entity,prefabName,originalScale);Debug.Log($\"Entidad '{prefabName}' creada en {adjustedPosition}\");}private void AddPhysicsComponents(Entity entity,string prefabName,float scale){BlobAssetReference<Unity.Physics.Collider> collider=default;Material mat=new Material{Friction=8f,Restitution=0f};switch(prefabName){case \"EColi\":collider=Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{Vertex0=new float3(0,-scale,0),Vertex1=new float3(0,scale,0),Radius=0.25f},CollisionFilter.Default,mat);break;case \"SCerevisiae\":collider=Unity.Physics.SphereCollider.Create(new SphereGeometry{Center=float3.zero,Radius=scale*0.1f},CollisionFilter.Default,mat);break;default:Debug.LogWarning($\"No collider para '{prefabName}'\");return;}entityManager.AddComponentData(entity,new PhysicsCollider{Value=collider});if(collider.IsCreated){var massProps=collider.Value.MassProperties;entityManager.AddComponentData(entity,PhysicsMass.CreateDynamic(massProps,1f));}entityManager.AddComponentData(entity,new PhysicsVelocity{Linear=float3.zero,Angular=float3.zero});entityManager.AddComponentData(entity,new PhysicsGravityFactor{Value=1f});entityManager.AddComponentData(entity,new PhysicsDamping{Linear=0f,Angular=50f});Debug.Log($\"Física añadida a '{prefabName}' (fricción alta, damping angular)\");}}3.EColiComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct EColiComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;}}4.SCerevisiaeComponent.cs{using Unity.Entities;using Unity.Mathematics;public struct SCerevisiaeComponent:IComponentData{public float TimeReference;public float MaxScale;public float GrowthTime;public float GrowthDuration;public float TimeSinceLastDivision;public float DivisionInterval;public bool HasGeneratedChild;public Entity Parent;public bool IsInitialCell;public float SeparationThreshold;public int SeparationSign;public float3 GrowthDirection;}}5.EColiSystem.cs{using Unity.Burst;using Unity.Collections;using Unity.Entities;using Unity.Jobs;using Unity.Mathematics;using Unity.Physics;using Unity.Physics.Extensions;using Unity.Transforms;using UnityEngine;[BurstCompile][UpdateInGroup(typeof(SimulationSystemGroup))]public partial class EColiSystem:SystemBase{protected override void OnUpdate(){if(!GameStateManager.IsSetupComplete||GameStateManager.IsPaused)return;float deltaTime=GameStateManager.DeltaTime;EntityQuery query=GetEntityQuery(typeof(LocalTransform));int capacity=math.max(1024,query.CalculateEntityCount()*2);NativeParallelHashMap<Entity,ParentData> parentMap=new NativeParallelHashMap<Entity,ParentData>(capacity,Allocator.TempJob);var parentMapWriter=parentMap.AsParallelWriter();Dependency=Entities.ForEach((Entity e,in LocalTransform transform)=>{parentMapWriter.TryAdd(e,new ParentData{Position=transform.Position,Rotation=transform.Rotation,Scale=transform.Scale});}).ScheduleParallel(Dependency);EndSimulationEntityCommandBufferSystem ecbSystem=World.GetOrCreateSystemManaged<EndSimulationEntityCommandBufferSystem>();var ecb=ecbSystem.CreateCommandBuffer().AsParallelWriter();Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref EColiComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*12345);int sign=rng.NextFloat()<0.5f?1:-1;Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;EColiComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.HasGeneratedChild=false;childData.IsInitialCell=false;childData.Parent=entity;childData.SeparationSign=sign;float3 upDir=math.mul(transform.Rotation,new float3(0,sign,0));childTransform.Position=transform.Position+upDir*(transform.Scale*0.25f);ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float offset=math.lerp(0f,parentData.Scale*4.9f,transform.Scale/maxScale);float3 up=math.mul(parentData.Rotation,new float3(0,organism.SeparationSign,0));transform.Position=parentData.Position+up*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}6.SCerevisiaeSystem.cs{using Unity.Burst;using Unity.Collections;using Unity.Entities;using Unity.Jobs;using Unity.Mathematics;using Unity.Physics;using Unity.Physics.Extensions;using Unity.Transforms;using UnityEngine;[BurstCompile][UpdateInGroup(typeof(SimulationSystemGroup))]public partial class SCerevisiaeSystem:SystemBase{protected override void OnUpdate(){if(!GameStateManager.IsSetupComplete||GameStateManager.IsPaused)return;float deltaTime=GameStateManager.DeltaTime;EntityQuery query=GetEntityQuery(typeof(LocalTransform));int capacity=math.max(1024,query.CalculateEntityCount()*2);NativeParallelHashMap<Entity,ParentData> parentMap=new NativeParallelHashMap<Entity,ParentData>(capacity,Allocator.TempJob);var parentMapWriter=parentMap.AsParallelWriter();Dependency=Entities.ForEach((Entity e,in LocalTransform transform)=>{parentMapWriter.TryAdd(e,new ParentData{Position=transform.Position,Rotation=transform.Rotation,Scale=transform.Scale});}).ScheduleParallel(Dependency);EndSimulationEntityCommandBufferSystem ecbSystem=World.GetOrCreateSystemManaged<EndSimulationEntityCommandBufferSystem>();var ecb=ecbSystem.CreateCommandBuffer().AsParallelWriter();Dependency=Entities.WithReadOnly(parentMap).ForEach((Entity entity,int entityInQueryIndex,ref LocalTransform transform,ref SCerevisiaeComponent organism)=>{float maxScale=organism.MaxScale;organism.GrowthDuration=organism.DivisionInterval=organism.TimeReference*organism.SeparationThreshold;if(transform.Scale<maxScale){organism.GrowthTime+=deltaTime;float t=math.clamp(organism.GrowthTime/organism.GrowthDuration,0f,1f);float initialScale=organism.IsInitialCell?maxScale:0.01f;transform.Scale=math.lerp(initialScale,maxScale,t);}if(transform.Scale>=maxScale){organism.TimeSinceLastDivision+=deltaTime;if(organism.TimeSinceLastDivision>=organism.DivisionInterval){Unity.Mathematics.Random rng=new Unity.Mathematics.Random((uint)(entityInQueryIndex+1)*99999);float angle=rng.NextFloat(0f,math.PI*2f);float3 randomDir=new float3(math.cos(angle),math.sin(angle),0f);Entity child=ecb.Instantiate(entityInQueryIndex,entity);LocalTransform childTransform=transform;childTransform.Scale=0.01f;SCerevisiaeComponent childData=organism;childData.GrowthTime=0f;childData.TimeSinceLastDivision=0f;childData.IsInitialCell=false;childData.Parent=entity;childData.GrowthDirection=randomDir;childTransform.Position=transform.Position;ecb.SetComponent(entityInQueryIndex,child,childTransform);ecb.SetComponent(entityInQueryIndex,child,childData);organism.TimeSinceLastDivision=0f;}}if(!organism.IsInitialCell&&organism.Parent!=Entity.Null&&parentMap.TryGetValue(organism.Parent,out ParentData parentData)){if(transform.Scale<organism.SeparationThreshold*maxScale){float ratio=math.clamp(transform.Scale/(organism.SeparationThreshold*maxScale),0f,1f);float offset=(parentData.Scale*0.5f)*ratio;float3 worldDir=math.mul(parentData.Rotation,organism.GrowthDirection);transform.Position=parentData.Position+worldDir*offset;transform.Rotation=parentData.Rotation;}else organism.Parent=Entity.Null;}}"}]}